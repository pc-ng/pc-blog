{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pc's Blog \u2693\ufe0e No description yet. .welcome { padding-left: .1em; margin-bottom: 0 } .site-name { margin-bottom: .5em !important; color: blue !important; } .site-description { font-size: large; padding-left: .05em; margin-bottom: 0; } .md-typeset .md-button { font-size: unset; min-width: 3em; text-align: center; padding: .3em 0 0 0; border-radius: .5em; border: 1px solid lightgray; color: unset; }","title":"Home"},{"location":"#pcs-blog","text":"No description yet. .welcome { padding-left: .1em; margin-bottom: 0 } .site-name { margin-bottom: .5em !important; color: blue !important; } .site-description { font-size: large; padding-left: .05em; margin-bottom: 0; } .md-typeset .md-button { font-size: unset; min-width: 3em; text-align: center; padding: .3em 0 0 0; border-radius: .5em; border: 1px solid lightgray; color: unset; }","title":"Pc's Blog"},{"location":"blog/research/","text":"..","title":"Research"},{"location":"blog/setup_blog/customize_theme/","text":"Material for MkDocs comes with some configs to change the look of the site. Follow the official homepage of Material for MkDocs to learn how to configure or override the theme with more information. 1. Theme settings \u2693\ufe0e 1.1. Color \u2693\ufe0e Changing color to white for header and background make the site now look like a white paper, and users can focus on the content only. theme : palette : primary : white 1.2. Fonts \u2693\ufe0e Serifed fonts are widely used for body text because they are considered easier to read than sans-serif fonts in print 1 . For better reading, distinguishing the digit zero from the Latin script letter is a way to avoid mistake, especially while reading technical notes. Fonts for source code do have slashed/ dotted/ open zero 2 , but fonts for reading don't have. It's also needed to clearly distinguish the digit one with lowercase i, the uppercase i with the lowercase l. Luckily, they usually do not stand close to each other. This site uses Noto Serif for body text, and Roboto Mono for code block, to replace the defaults font . theme : font : text : Noto Serif code : Roboto Mono Preview of confusing pairs of letters: Body text: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL Code block: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL 1.3. Logo & Icon \u2693\ufe0e Replace the default icon and logo with this symbol: theme : icon : logo : fontawesome/solid/code favicon : favicon.ico 1.4. Navigation \u2693\ufe0e Here are some interesting features for navigation : Navigation tabs : make top-level sections become header tabs Back-to-top button : scroll up when user has scrolled down so far Hide header bar : the header is automatically hidden when the user scrolls down Those are activated as below: theme : features : - navigation.tabs - navigation.top - header.autohide 1.5. Table of Content \u2693\ufe0e The Table of Content extension provides a quick navigation between sections in the post, have anchor link at each header. markdown_extensions : - toc : permalink : \u2693\ufe0e slugify : !!python/name:pymdownx.slugs.uslugify toc_depth : 4 1.6. Additional assets \u2693\ufe0e Stylesheets and Javascripts are easily added to the theme by declaring the paths in the config file mkdocs.yml : extra_css : - stylesheets/extra.css extra_javascript : - javascripts/extra.js which finds see the folder structure as below: . \u251c\u2500 docs/ \u2502 \u251c\u2500 stylesheets/ \u2502 \u2502 \u2514\u2500 extra.css \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml 2. Override theme \u2693\ufe0e MkDocs allows to override the them by just adding extra files that will replace the original ones when MkDocs sees the config of them extending. Enable theme extending mkdocs.yml , and create a new folder overrides : theme : name : material custom_dir : overrides Override files : The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory. . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page The template file base.html , original path is in .venv\\Lib\\site-packages\\material , is the starting point of any site's page. All other page should extend from it. The main.html will be used for all markdown pages. Override blocks : Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the template files and wrap specific features. To override a block, create a new templat .html file inside the overrides directory, and define a same block name with the one which will be overridden: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} The list of blocks: analytics # Wraps the Google Analytics integration announce # Wraps the announcement bar config # Wraps the JavaScript application config content # Wraps the main content disqus # Wraps the Disqus integration extrahead # Empty block to add custom meta tags fonts # Wraps the font definitions footer # Wraps the footer with navigation and copyright header # Wraps the fixed header bar hero # Wraps the hero teaser (if available) htmltitle # Wraps the <title> tag libs # Wraps the JavaScript libraries (header) outdated # Wraps the version warning scripts # Wraps the JavaScript application (footer) source # Wraps the linked source files site_meta # Wraps the meta tags in the document head site_nav # Wraps the site navigation and table of contents styles # Wraps the stylesheets (also extra sources) tabs # Wraps the tabs navigation (if available) 2.1. Index page \u2693\ufe0e The index.html at the root of the docs folder will be the initial page of the site. At this moment, it should show the site name, and the site description. Add site information in mkdocs.yml : site_name : Code Inside Out site_url : https://www.codeinsideout.com/ # must have the trailing slash site_author : vqtrong site_email : vuquangtrong@gmail.com site_description : >- Interesting stuff in Embedded Systems and IoT Applications. From hardwares to cloud applications. Step by step. site_keywords : embedded systems application programming Modify the default content of docs\\index.md with jinja template, which is enabled by Macro plugin , and markdown advanced syntax for attribute lists: --- title: Home disqus: \"\" hide: - navigation - toc --- Welcome to {.welcome} # {{ config.site_name }} {.site-name} {{ config.site_description_full }} {.site-description} --- {# create a list of social buttons use - to remove leading or trailing spaces #} {%- if config.extra.social -%} {%- for social in config.extra.social -%} [ :{{ social.icon | replace('/', '-') }}: ]( {{ social.link }} ){.md-button} {% endfor %} {% endif %} <style> .welcome { padding-left: .1em; margin-bottom: 0 } .site-name { margin-bottom: .5em !important; color: blue !important; } .site-description { font-size: large; padding-left: .05em; margin-bottom: 0; } .md-typeset .md-button { font-size: unset; min-width: 3em; text-align: center; padding: .3em 0 0 0; border-radius: .5em; border: 1px solid lightgray; color: unset; } </style> 2.2. Error page \u2693\ufe0e The 404.html page is a special page that will be served whenever the requested URL does not exist. Add new file 404.html in the folder override , and write a short message to inform users about the unhandled request. {% extends \"base.html\" %} {% block styles %} {{ super () }} <style> .md-sidebar { display: none; } </style> {% endblock %} {% block content %} <div style=\"text-align: center;\"> <h1> Oops! Something went wrong! </h1> <h3> Please go back to the <a href=\" {{ config.site_url }} \"> {{ config.site_name }} </a> homepage,<br> or press <kbd>S</kbd> to search on this site. </h3> </div> {% endblock %} {% block disqus %} {% endblock %} 2.3. Zoom-in Image \u2693\ufe0e As mentioned in Images , view-bigimg library helps to make image zoom-able and pan-able. Download view-bigimg.css and view-bigimg.js files from the src folder . Add them into additions assests configs in mkdocs.yml extra_css : - stylesheets/view-bigimg.css extra_javascript : - javascripts/view-bigimg.js Add a function to quick close the image on one mouse click extra.js var dragged = false ; document . addEventListener ( 'mousedown' , () => dragged = false ); document . addEventListener ( 'mousemove' , () => dragged = true ); var viewer = new ViewBigimg () var figures = document . querySelectorAll ( 'figure' ) for ( var i = 0 ; i < figures . length ; i ++ ) { figures [ i ]. onclick = ( e ) => { if ( e . target . nodeName === 'IMG' ) { viewer . show ( e . target . src ); } } } var containers = document . querySelectorAll ( '#iv-container .iv-image-view' ) for ( var i = 0 ; i < containers . length ; i ++ ) { containers [ i ]. onclick = () => { if ( ! dragged ) { viewer . hide (); } } } 2.4. Modified styles \u2693\ufe0e Change the look of HTML elements by adding styles in the additional stylesheet assets\\extra.css . extra.css 2.4.1. Page \u2693\ufe0e List of modifications: Set Orange color for the logo Set White background color in the Search input field Clear the top margin of the Main content Clear background color in the footer Make active links in navigation bolder Show scrollbar only hover on sidebars 2.4.2. Content \u2693\ufe0e List of modifications: Make headers Orange Make buttons smaller Set Dark Red color for codeblocks Make codeblocks wrap long lines 3. Add tags \u2693\ufe0e 3.1. Meta-data \u2693\ufe0e Tags are added in the meta-data section in each document. For example: --- title : title description : description tags : - python - mkdocs - jinja --- 3.2. Tag page \u2693\ufe0e Add new page for showing tags at docs\\tags\\index.md which will use tags.html template: --- title : Tags template : tags.html disqus : \"\" --- ## Tags then write tags.html template to include 2 parts: {% extends \"main.html\" %} {% block styles %} {{ super () }} <style> .md-sidebar__inner { display: none; } @media screen and (max-width: 76.1875em) { .md-sidebar { display: none !important; } } </style> {% endblock %} {% block content %} {% include \"partials/tag-cloud.html\" %} {% include \"partials/tag-list-pages.html\" %} {% endblock %} 3.3. Tag cloud \u2693\ufe0e Scan all pages and create a list of pairs (tag, pages[]) Show each tag with different text size: tag which has more page count will show in bigger size Tag cloud can be show in all pages, by adding tag-cloud.html to the sidebars in base.html template. <div style=\"font-weight:700; font-size:.7rem; margin:0 0.6rem;\"> <label>Tag cloud</label> </div> <div style=\"padding: 0.4rem 0.6rem;\"> {% include \"partials/tag-cloud.html\" %} </div> 3.4. Tag list \u2693\ufe0e List all tags of the current page: {% if page and page.meta and page.meta.tags %} <p> {% for tag in page.meta.tags %} <a class=\"tag\" href=\" {{ config.site_url }} tags/# {{ tag }} \"> <span class=\"tag-name\" style=\"color: {{ random_color () }} ;\"> # {{ tag }} </span> </a> {% endfor %} </p> {% endif %} 3.5. Page list \u2693\ufe0e Scan all pages and create a list of pairs (tag, pages[]) Show each tag with the list of pages in collapsible block Only one block is open at a time [... document . getElementsByTagName ( \"details\" )]. forEach (( D , _ , A ) => { D . open = false D . addEventListener ( \"toggle\" , E => D . open && A . forEach ( d => d != E . target && ( d . open = false ) ) ) } ) var hash = window . location . hash . substr ( 1 ); if ( hash ) { document . getElementById ( hash ). open = true ; } https://en.wikipedia.org/wiki/Serif \u21a9 https://en.wikipedia.org/wiki/Slashed_zero \u21a9","title":"Customize theme"},{"location":"blog/setup_blog/customize_theme/#1-theme-settings","text":"","title":"1. Theme settings"},{"location":"blog/setup_blog/customize_theme/#11-color","text":"Changing color to white for header and background make the site now look like a white paper, and users can focus on the content only. theme : palette : primary : white","title":"1.1. Color"},{"location":"blog/setup_blog/customize_theme/#12-fonts","text":"Serifed fonts are widely used for body text because they are considered easier to read than sans-serif fonts in print 1 . For better reading, distinguishing the digit zero from the Latin script letter is a way to avoid mistake, especially while reading technical notes. Fonts for source code do have slashed/ dotted/ open zero 2 , but fonts for reading don't have. It's also needed to clearly distinguish the digit one with lowercase i, the uppercase i with the lowercase l. Luckily, they usually do not stand close to each other. This site uses Noto Serif for body text, and Roboto Mono for code block, to replace the defaults font . theme : font : text : Noto Serif code : Roboto Mono Preview of confusing pairs of letters: Body text: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL Code block: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL","title":"1.2. Fonts"},{"location":"blog/setup_blog/customize_theme/#13-logo--icon","text":"Replace the default icon and logo with this symbol: theme : icon : logo : fontawesome/solid/code favicon : favicon.ico","title":"1.3. Logo &amp; Icon"},{"location":"blog/setup_blog/customize_theme/#14-navigation","text":"Here are some interesting features for navigation : Navigation tabs : make top-level sections become header tabs Back-to-top button : scroll up when user has scrolled down so far Hide header bar : the header is automatically hidden when the user scrolls down Those are activated as below: theme : features : - navigation.tabs - navigation.top - header.autohide","title":"1.4. Navigation"},{"location":"blog/setup_blog/customize_theme/#15-table-of-content","text":"The Table of Content extension provides a quick navigation between sections in the post, have anchor link at each header. markdown_extensions : - toc : permalink : \u2693\ufe0e slugify : !!python/name:pymdownx.slugs.uslugify toc_depth : 4","title":"1.5. Table of Content"},{"location":"blog/setup_blog/customize_theme/#16-additional-assets","text":"Stylesheets and Javascripts are easily added to the theme by declaring the paths in the config file mkdocs.yml : extra_css : - stylesheets/extra.css extra_javascript : - javascripts/extra.js which finds see the folder structure as below: . \u251c\u2500 docs/ \u2502 \u251c\u2500 stylesheets/ \u2502 \u2502 \u2514\u2500 extra.css \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml","title":"1.6. Additional assets"},{"location":"blog/setup_blog/customize_theme/#2-override-theme","text":"MkDocs allows to override the them by just adding extra files that will replace the original ones when MkDocs sees the config of them extending. Enable theme extending mkdocs.yml , and create a new folder overrides : theme : name : material custom_dir : overrides Override files : The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory. . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page The template file base.html , original path is in .venv\\Lib\\site-packages\\material , is the starting point of any site's page. All other page should extend from it. The main.html will be used for all markdown pages. Override blocks : Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the template files and wrap specific features. To override a block, create a new templat .html file inside the overrides directory, and define a same block name with the one which will be overridden: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} The list of blocks: analytics # Wraps the Google Analytics integration announce # Wraps the announcement bar config # Wraps the JavaScript application config content # Wraps the main content disqus # Wraps the Disqus integration extrahead # Empty block to add custom meta tags fonts # Wraps the font definitions footer # Wraps the footer with navigation and copyright header # Wraps the fixed header bar hero # Wraps the hero teaser (if available) htmltitle # Wraps the <title> tag libs # Wraps the JavaScript libraries (header) outdated # Wraps the version warning scripts # Wraps the JavaScript application (footer) source # Wraps the linked source files site_meta # Wraps the meta tags in the document head site_nav # Wraps the site navigation and table of contents styles # Wraps the stylesheets (also extra sources) tabs # Wraps the tabs navigation (if available)","title":"2. Override theme"},{"location":"blog/setup_blog/customize_theme/#21-index-page","text":"The index.html at the root of the docs folder will be the initial page of the site. At this moment, it should show the site name, and the site description. Add site information in mkdocs.yml : site_name : Code Inside Out site_url : https://www.codeinsideout.com/ # must have the trailing slash site_author : vqtrong site_email : vuquangtrong@gmail.com site_description : >- Interesting stuff in Embedded Systems and IoT Applications. From hardwares to cloud applications. Step by step. site_keywords : embedded systems application programming Modify the default content of docs\\index.md with jinja template, which is enabled by Macro plugin , and markdown advanced syntax for attribute lists: --- title: Home disqus: \"\" hide: - navigation - toc --- Welcome to {.welcome} # {{ config.site_name }} {.site-name} {{ config.site_description_full }} {.site-description} --- {# create a list of social buttons use - to remove leading or trailing spaces #} {%- if config.extra.social -%} {%- for social in config.extra.social -%} [ :{{ social.icon | replace('/', '-') }}: ]( {{ social.link }} ){.md-button} {% endfor %} {% endif %} <style> .welcome { padding-left: .1em; margin-bottom: 0 } .site-name { margin-bottom: .5em !important; color: blue !important; } .site-description { font-size: large; padding-left: .05em; margin-bottom: 0; } .md-typeset .md-button { font-size: unset; min-width: 3em; text-align: center; padding: .3em 0 0 0; border-radius: .5em; border: 1px solid lightgray; color: unset; } </style>","title":"2.1. Index page"},{"location":"blog/setup_blog/customize_theme/#22-error-page","text":"The 404.html page is a special page that will be served whenever the requested URL does not exist. Add new file 404.html in the folder override , and write a short message to inform users about the unhandled request. {% extends \"base.html\" %} {% block styles %} {{ super () }} <style> .md-sidebar { display: none; } </style> {% endblock %} {% block content %} <div style=\"text-align: center;\"> <h1> Oops! Something went wrong! </h1> <h3> Please go back to the <a href=\" {{ config.site_url }} \"> {{ config.site_name }} </a> homepage,<br> or press <kbd>S</kbd> to search on this site. </h3> </div> {% endblock %} {% block disqus %} {% endblock %}","title":"2.2. Error page"},{"location":"blog/setup_blog/customize_theme/#23-zoom-in-image","text":"As mentioned in Images , view-bigimg library helps to make image zoom-able and pan-able. Download view-bigimg.css and view-bigimg.js files from the src folder . Add them into additions assests configs in mkdocs.yml extra_css : - stylesheets/view-bigimg.css extra_javascript : - javascripts/view-bigimg.js Add a function to quick close the image on one mouse click extra.js var dragged = false ; document . addEventListener ( 'mousedown' , () => dragged = false ); document . addEventListener ( 'mousemove' , () => dragged = true ); var viewer = new ViewBigimg () var figures = document . querySelectorAll ( 'figure' ) for ( var i = 0 ; i < figures . length ; i ++ ) { figures [ i ]. onclick = ( e ) => { if ( e . target . nodeName === 'IMG' ) { viewer . show ( e . target . src ); } } } var containers = document . querySelectorAll ( '#iv-container .iv-image-view' ) for ( var i = 0 ; i < containers . length ; i ++ ) { containers [ i ]. onclick = () => { if ( ! dragged ) { viewer . hide (); } } }","title":"2.3. Zoom-in Image"},{"location":"blog/setup_blog/customize_theme/#24-modified-styles","text":"Change the look of HTML elements by adding styles in the additional stylesheet assets\\extra.css . extra.css","title":"2.4. Modified styles"},{"location":"blog/setup_blog/customize_theme/#241-page","text":"List of modifications: Set Orange color for the logo Set White background color in the Search input field Clear the top margin of the Main content Clear background color in the footer Make active links in navigation bolder Show scrollbar only hover on sidebars","title":"2.4.1. Page"},{"location":"blog/setup_blog/customize_theme/#242-content","text":"List of modifications: Make headers Orange Make buttons smaller Set Dark Red color for codeblocks Make codeblocks wrap long lines","title":"2.4.2. Content"},{"location":"blog/setup_blog/customize_theme/#3-add-tags","text":"","title":"3. Add tags"},{"location":"blog/setup_blog/customize_theme/#31-meta-data","text":"Tags are added in the meta-data section in each document. For example: --- title : title description : description tags : - python - mkdocs - jinja ---","title":"3.1. Meta-data"},{"location":"blog/setup_blog/customize_theme/#32-tag-page","text":"Add new page for showing tags at docs\\tags\\index.md which will use tags.html template: --- title : Tags template : tags.html disqus : \"\" --- ## Tags then write tags.html template to include 2 parts: {% extends \"main.html\" %} {% block styles %} {{ super () }} <style> .md-sidebar__inner { display: none; } @media screen and (max-width: 76.1875em) { .md-sidebar { display: none !important; } } </style> {% endblock %} {% block content %} {% include \"partials/tag-cloud.html\" %} {% include \"partials/tag-list-pages.html\" %} {% endblock %}","title":"3.2. Tag page"},{"location":"blog/setup_blog/customize_theme/#33-tag-cloud","text":"Scan all pages and create a list of pairs (tag, pages[]) Show each tag with different text size: tag which has more page count will show in bigger size Tag cloud can be show in all pages, by adding tag-cloud.html to the sidebars in base.html template. <div style=\"font-weight:700; font-size:.7rem; margin:0 0.6rem;\"> <label>Tag cloud</label> </div> <div style=\"padding: 0.4rem 0.6rem;\"> {% include \"partials/tag-cloud.html\" %} </div>","title":"3.3. Tag cloud"},{"location":"blog/setup_blog/customize_theme/#34-tag-list","text":"List all tags of the current page: {% if page and page.meta and page.meta.tags %} <p> {% for tag in page.meta.tags %} <a class=\"tag\" href=\" {{ config.site_url }} tags/# {{ tag }} \"> <span class=\"tag-name\" style=\"color: {{ random_color () }} ;\"> # {{ tag }} </span> </a> {% endfor %} </p> {% endif %}","title":"3.4. Tag list"},{"location":"blog/setup_blog/customize_theme/#35-page-list","text":"Scan all pages and create a list of pairs (tag, pages[]) Show each tag with the list of pages in collapsible block Only one block is open at a time [... document . getElementsByTagName ( \"details\" )]. forEach (( D , _ , A ) => { D . open = false D . addEventListener ( \"toggle\" , E => D . open && A . forEach ( d => d != E . target && ( d . open = false ) ) ) } ) var hash = window . location . hash . substr ( 1 ); if ( hash ) { document . getElementById ( hash ). open = true ; } https://en.wikipedia.org/wiki/Serif \u21a9 https://en.wikipedia.org/wiki/Slashed_zero \u21a9","title":"3.5. Page list"},{"location":"blog/setup_blog/install_and_configure/","text":"1. Installation \u2693\ufe0e 1.1. Python \u2693\ufe0e Download and install Python 3 . 1.2. Material for MkDocs \u2693\ufe0e There are some static site generators written in Python: MkDocs, Pelican, Sphinx, etc. MkDocs is the most popular one. MkDocs is a fast and simple engine to build project documentation. Content source files are written in Markdown , and configured with a single YAML config file. Material for MkDocs is a popular theme for MkDocs. It has a simple UI with Material color palettes. It also brings more features, has flexible settings, and makes a clear layout for printing. Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs Start a new project: mkdir CodeInsideOut cd CodeInsideOut Create project's virtual environment : python -m venv .venv Why should use virtual environment? Read more here. Activate the environment: .venv\\Scripts\\activate.bat Then update the pip and setuptools : python -m pip install -U pip setuptools -U or --upgrade will upgrade the package if it is already installed Then install Material for Mkdocs : pip install -U mkdocs-material Finally, bring up the base of the site mkdocs new . This will create the following structure . \u251c\u2500 mkdocs.yml # The configuration file \u2514\u2500 docs/ # Other markdown pages \u251c\u2500 index.md # The documentation homepage \u2514\u2500 ... # Other files Change the theme to material in the project configuration file mkdocs.yml : theme : name : material That's it. Start a local server with : mkdocs serve and preview the site at http://localhost:8000 . To publish the site, build it: mkdocs build then copy all the content in the site folder to the website root folder. 1.3. Visual Studio Code \u2693\ufe0e Install Visual Studio Code - a lightweight but powerful source code editor. It well supports users to write code, documents, notes. Useful extensions for writing in Markdown and editing HTML template: Code Spell Checker : catch common spelling errors Markdown All in One : keyboard shortcuts, auto completions, list and task list, table formatter Markdown Paste : paste image, links from clipboard Jinja : highlight Jinja syntax (HTML template) Git History : view history edits from git log 2. Configuration \u2693\ufe0e 2.1. Markdown extensions \u2693\ufe0e Original Markdown syntax just renders some basic elements. Therefore many extensions are made to extend Markdown syntax: Official Markdown extensions has more syntaxes to make Tables, Table of Content, Abbreviations, Admonitions, Codeblocks. PyMdown Extensions has a list of useful extensions to replace the official ones which eventually produce much better formats such as Nested Code Bocks, Tabs, Progress Bars, Tasks. 3 rd party extensions which extend the Python Markdown APIs to deal with Math/Latex, Diagrams, Advanced formats, and more. Material for MkDocs comes with both Official Python Markdown extensions and PyMdown Extensions, but those are not fully activated. To enable an extension, just need to declare its name in the project config file mkdocs.yml under markdown_extensions field. For example: markdown_extensions : - admonition Refer to Markdown Syntax to know the list of extensions and their usage. 2.2. MkDocs plugins \u2693\ufe0e To extend the abilities of MkDocs, there are some plugins can be installed. Check the list at the official MkDocs plugin list . To enable an extension, just need to declare its name in the project config file mkdocs.yml under plugins field. For example: plugins : - search # built-in search engine Refer to MkDocs plugins to know the list of plugins and their usage. 2.3. Theme configs \u2693\ufe0e Material for MkDocs comes with some configs to change the look of the site. Follow the official homepage of Material for MkDocs to learn how to configure or override the theme with more information. List of modifications: Theme settings Overridden templates Additional styles Refer to Customize theme to know the list of modifications in details.","title":"Install and configure"},{"location":"blog/setup_blog/install_and_configure/#1-installation","text":"","title":"1. Installation"},{"location":"blog/setup_blog/install_and_configure/#11-python","text":"Download and install Python 3 .","title":"1.1. Python"},{"location":"blog/setup_blog/install_and_configure/#12-material-for-mkdocs","text":"There are some static site generators written in Python: MkDocs, Pelican, Sphinx, etc. MkDocs is the most popular one. MkDocs is a fast and simple engine to build project documentation. Content source files are written in Markdown , and configured with a single YAML config file. Material for MkDocs is a popular theme for MkDocs. It has a simple UI with Material color palettes. It also brings more features, has flexible settings, and makes a clear layout for printing. Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs.Refer to the official homepage of Material for MkDocs Start a new project: mkdir CodeInsideOut cd CodeInsideOut Create project's virtual environment : python -m venv .venv Why should use virtual environment? Read more here. Activate the environment: .venv\\Scripts\\activate.bat Then update the pip and setuptools : python -m pip install -U pip setuptools -U or --upgrade will upgrade the package if it is already installed Then install Material for Mkdocs : pip install -U mkdocs-material Finally, bring up the base of the site mkdocs new . This will create the following structure . \u251c\u2500 mkdocs.yml # The configuration file \u2514\u2500 docs/ # Other markdown pages \u251c\u2500 index.md # The documentation homepage \u2514\u2500 ... # Other files Change the theme to material in the project configuration file mkdocs.yml : theme : name : material That's it. Start a local server with : mkdocs serve and preview the site at http://localhost:8000 . To publish the site, build it: mkdocs build then copy all the content in the site folder to the website root folder.","title":"1.2. Material for MkDocs"},{"location":"blog/setup_blog/install_and_configure/#13-visual-studio-code","text":"Install Visual Studio Code - a lightweight but powerful source code editor. It well supports users to write code, documents, notes. Useful extensions for writing in Markdown and editing HTML template: Code Spell Checker : catch common spelling errors Markdown All in One : keyboard shortcuts, auto completions, list and task list, table formatter Markdown Paste : paste image, links from clipboard Jinja : highlight Jinja syntax (HTML template) Git History : view history edits from git log","title":"1.3. Visual Studio Code"},{"location":"blog/setup_blog/install_and_configure/#2-configuration","text":"","title":"2. Configuration"},{"location":"blog/setup_blog/install_and_configure/#21-markdown-extensions","text":"Original Markdown syntax just renders some basic elements. Therefore many extensions are made to extend Markdown syntax: Official Markdown extensions has more syntaxes to make Tables, Table of Content, Abbreviations, Admonitions, Codeblocks. PyMdown Extensions has a list of useful extensions to replace the official ones which eventually produce much better formats such as Nested Code Bocks, Tabs, Progress Bars, Tasks. 3 rd party extensions which extend the Python Markdown APIs to deal with Math/Latex, Diagrams, Advanced formats, and more. Material for MkDocs comes with both Official Python Markdown extensions and PyMdown Extensions, but those are not fully activated. To enable an extension, just need to declare its name in the project config file mkdocs.yml under markdown_extensions field. For example: markdown_extensions : - admonition Refer to Markdown Syntax to know the list of extensions and their usage.","title":"2.1. Markdown extensions"},{"location":"blog/setup_blog/install_and_configure/#22-mkdocs-plugins","text":"To extend the abilities of MkDocs, there are some plugins can be installed. Check the list at the official MkDocs plugin list . To enable an extension, just need to declare its name in the project config file mkdocs.yml under plugins field. For example: plugins : - search # built-in search engine Refer to MkDocs plugins to know the list of plugins and their usage.","title":"2.2. MkDocs plugins"},{"location":"blog/setup_blog/install_and_configure/#23-theme-configs","text":"Material for MkDocs comes with some configs to change the look of the site. Follow the official homepage of Material for MkDocs to learn how to configure or override the theme with more information. List of modifications: Theme settings Overridden templates Additional styles Refer to Customize theme to know the list of modifications in details.","title":"2.3. Theme configs"},{"location":"blog/setup_blog/markdown_syntax/","text":"For basic markdown syntax, refer to Markdown Guide . 1. Meta-data \u2693\ufe0e The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Enable the extension: markdown_extensions : - meta Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: title : The page title description : The summary of the page content tags : page markdown Alternatively, YAML style, using triple-dash --- , can be used to mark the start and the end of the meta-data section: --- title : The page title description : The summary of the page content tags : - page - markdown --- The metadata can be used in the template and page content. In jinja syntax, each page is represented as a page object, then Markdown syntax will be replaced by the page's title. Read more about using metadata in page content, and customize the theme. 2. Admonition \u2693\ufe0e The Admonition extension adds rST-style admonitions to Markdown documents. Enable the extension: markdown_extensions : - admonition Admonitions are created using the following syntax: !!! type \"Title\" Content of the admonition is indented. Title Content of the admonition is indented. Using custom class and style to make admonition which does not have title but still have icon: !!! type notitle \"&nbsp;\" Content of the admonition is indented. Content of the admonition is indented. Other types : note, seealso Content of the admonition is indented. abstract, summary, tldr Content of the admonition is indented. info, todo Content of the admonition is indented. tip, hint, important Content of the admonition is indented. success, check, done Content of the admonition is indented. question, help, faq Content of the admonition is indented. warning, caution, attention Content of the admonition is indented. failure, fail, missing Content of the admonition is indented. danger, error Content of the admonition is indented. bug Content of the admonition is indented. example Content of the admonition is indented. quote, cite Content of the admonition is indented. 3. Attribute \u2693\ufe0e The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. Enable the extension: markdown_extensions : - attr_list An example attribute list might look like this: { #someid .someclass somekey='somevalue' } Block attribute : To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {style=\"font-style:italic;\"} Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. Element attribute : To define attributes on inline elements, the attribute list should be defined immediately after the inline element generated by markdown with no white space. This is a _green_ {style=\"color:green\"} word. This is a <span>green</span>{style=\"color:green\"} word. This is a green word. This is a non-green {style=\"color:green\"} word. 4. Lists \u2693\ufe0e Markdown supports Ordered and Unordered lists. Extensions provide 2 more kinds of list as Tasks and Definitions . The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Enable the extension: markdown_extensions : - pymdownx.tasklist - def_list - sane_lists Ordered list : 1. Ordered item 1 1. Child 1 2. Child 2 2. Ordered item 2 Ordered item 1 Child 1 Child 2 Ordered item 2 Unordered list : * Unordered item 1 * Child 1 * Child 2 * Unordered item 2 Unordered item 1 Child 1 Child 2 Unordered item 2 Sane list : 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 Ordered item 1 Ordered item 2 Unordered item 1 Unordered item 2 Tasks : - [x] item 1 * [x] item A * [ ] item B - [ ] item 2 item 1 item A item B item 2 Definitions : Roses : are red Violets : are blue Roses are red Violets are blue 5. Code blocks \u2693\ufe0e The SuperFences extension provides a number of features including allowing the nesting of fences, and ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Highlighting can be further controlled via the Highlight extension . Enable the extension: markdown_extensions : - pymdownx.superfences - pymdownx.highlight The format is as below: ```{ .language #id .class key=\"value\" linenums=\"n\" hl_lines=\"x y-z\"} codeblock content ``` or in simpler syntax which does not support id , class or custom key=value : ``` language linenums=\"n\" hl_lines=\"x y-z\" codeblock content ``` Option linenums = \"n\" creates line numbers starting from n . Option hl_lines = \"x y-z\" highlights the x-th line and lines in the range from y to z . Line numbers are always referenced starting at 1 ignoring what the line number is labeled by the option linenums = \"n\" . ``` c linenums=\"2\" hl_lines=\"1 4-5\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } 6. Inline code \u2693\ufe0e the InlineHilite extension is an inline code highlighter inspired by CodeHilite . Enable the extension: markdown_extensions : - pymdownx.inlinehilite Borrowing from CodeHilite's existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: `:::language mycode` or `#!language mycode` This will render as below example: A line of python code: `#!python [x for x in range(1, 10) if x % 2]` . A line of python code: [ x for x in range ( 1 , 10 ) if x % 2 ] . 7. Images \u2693\ufe0e There are some extensions to add a caption to an image. After testing, markdown-captions is a good one that uses alt text to make caption, accepts markdown in alt text. ![ Caption ]( link to image ) Some images have big size that does not show the detail, therefore, it's better to zoom in by clicking on them, and pan the image on the screen. The view-bigimg library do that requirement well. Enable it by following Customize theme . For example: ![ Lorem Picsum ]( https://picsum.photos/1280/720 ) Lorem Picsum 8. Tabs \u2693\ufe0e Tabbed extension provides a syntax to easily add tabbed Markdown content. Enable the extension: markdown_extensions : - pymdownx.tabbed Tabs start with === to signify a tab followed by a quoted title. Consecutive tabs are grouped into a tab set. === \"Tab 1\" Some texts === \"Tab 2\" Some other texts Inner tabs: === \"Tab A\" Text A === \"Tab B\" Text B Tab 1 Some texts Tab 2 Some other texts Inner tabs: Tab A Text A Tab B Text B 9. Tables \u2693\ufe0e The Tables extension adds the ability to create tables in Markdown documents. Enable the extension: markdown_extensions : - tables Markdown Tables are written in pipe-line format: row is on one line, cell is inline text only. The 1 st line contains the column headers. The 2 nd line is to control text alignment in a column: :--- , :---: and ---: are left, center, and right alignment. | Syntax | Description | Test Text | | :--------- | :----------: | ----------: | | Left align | Center align | Right align | | Some texts | Some texts | Some texts | Syntax Description Test Text Left align Center align Right align Some texts Some texts Some texts 10. Formatting \u2693\ufe0e Carets : Caret optionally adds two different features which are syntactically built around the ^ character. Enable the extension: markdown_extensions : - pymdownx.caret The double carets ^^ inserts <ins></ins> tags, and the single caret ^ inserts <sup></sup> tags. ^^Insert me^^ H^2^0 Insert me H 2 0 Marks : Mark adds the ability to insert <mark></mark> tags. Enable the extension: markdown_extensions : - pymdownx.mark The syntax requires the text to be surrounded by double equal signs == . ==mark me== ==smart==mark== mark me smart==mark Tildes : The PyMdown extension optionally adds two different features which are syntactically built around the ~ character: delete using double tildes ~~ which inserts <del></del> tags and subscript using single tilde ~ which inserts <sub></sub> tags. Enable the extension: markdown_extensions : - pymdownx.tilde For example: ~~Delete me~~ CH~3~CH~2~OH Delete me CH 3 CH 2 OH 11. Critic \u2693\ufe0e Critic is an extension that adds handling and support of Critic Markup which uses a special syntax to represent edits to a Markdown document. This extension runs before all other extensions to parse the critic edits. Enable the extension: markdown_extensions : - pymdownx.critic Critic Markup uses special markup to insert, delete, substitute, highlight, and comment. To insert or remove text you can use {\u200b++insert me++} and {\u200b--remove me--} respectively. You can also denote a substitution with {\u200b~~substitute this~>with this~~}. You can also highlight specific text with {\u200b==highlight me==}. Or even comment, which is generally done by highlighting text and following it with a comment: {\u200b==highlight me==}{\u200b>>Add a comment<<}. To insert or remove text you can use insert me and remove me respectively. You can also denote a substitution with substitute this with this . You can also highlight specific text with highlight me . Or even comment, which is generally done by highlighting text and following it with a comment: highlight me Add a comment . 12. HTML block \u2693\ufe0e The Markdown in HTML extension that parses Markdown inside of HTML block tags. Enable the extension: markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md-in-html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. <div> This is __not parsed__ by Markdown. </div> <div markdown=\"1\"> This is a __bold__ word parsed by Markdown. </div> This is __not parsed__ by Markdown. This is a bold word parsed by Markdown. 13. Icons & Emojis \u2693\ufe0e The Emoji extension Enable the extension: markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg Emojis : Emojis can be written by putting the shortcode of the emoji between two colons. Look up the shortcodes at Emojipedia . :smile: :heart: Icons : Icons can be used similarly to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-24: \u2013 `.icons/octicons/octoface-24.svg` Include in theme : Using include function of Jinja to add an icon wrapped in a twemoji class: <span class=\"twemoji\"> {% include \".icons/fontawesome/brands/twitter.svg\" %} </span> 14. Custom block \u2693\ufe0e The Custom Blocks extension defines a common markup to create parametrizable and nestable custom blocks. Install the extension: pip install -U markdown-customblocks Enable the extension: markdown_extensions : - customblocks This extension parses markup structures like this one: ::: mytype \"value 1\" param2=value2 Indented content Example usage : Add the filename of a codeblock, to show where the it belongs. Syntax: ::: file main.c ``` cpp int main(void) { return 0; } ``` with style: . md-typeset . file > p { font-size : .9 em ; font-style : italic ; color : darkred ; margin-bottom : -1.2 em ; } will generate: main.c int main ( void ) { return 0 ; } 15. Footnotes \u2693\ufe0e The Footnotes extension adds syntax for defining footnotes in Markdown documents. Enable the extension: markdown_extensions : - footnotes And use the following syntax: Footnotes[^1] have a label[^fn] and the footnote's content. [ ^1 ]: This is a footnote content. [ ^fn ]: A footnote on the label _fn_. to get: Footnotes 1 have a label 2 and the footnote's content. This is a footnote content. \u21a9 A footnote on the label fn . \u21a9","title":"Markdown syntax"},{"location":"blog/setup_blog/markdown_syntax/#1-meta-data","text":"The Meta-Data extension adds a syntax for defining meta-data about a document. It is inspired by and follows the syntax of MultiMarkdown . Enable the extension: markdown_extensions : - meta Meta-data consists of a series of keywords and values defined at the beginning of a markdown document like this: title : The page title description : The summary of the page content tags : page markdown Alternatively, YAML style, using triple-dash --- , can be used to mark the start and the end of the meta-data section: --- title : The page title description : The summary of the page content tags : - page - markdown --- The metadata can be used in the template and page content. In jinja syntax, each page is represented as a page object, then Markdown syntax will be replaced by the page's title. Read more about using metadata in page content, and customize the theme.","title":"1. Meta-data"},{"location":"blog/setup_blog/markdown_syntax/#2-admonition","text":"The Admonition extension adds rST-style admonitions to Markdown documents. Enable the extension: markdown_extensions : - admonition Admonitions are created using the following syntax: !!! type \"Title\" Content of the admonition is indented. Title Content of the admonition is indented. Using custom class and style to make admonition which does not have title but still have icon: !!! type notitle \"&nbsp;\" Content of the admonition is indented. Content of the admonition is indented. Other types : note, seealso Content of the admonition is indented. abstract, summary, tldr Content of the admonition is indented. info, todo Content of the admonition is indented. tip, hint, important Content of the admonition is indented. success, check, done Content of the admonition is indented. question, help, faq Content of the admonition is indented. warning, caution, attention Content of the admonition is indented. failure, fail, missing Content of the admonition is indented. danger, error Content of the admonition is indented. bug Content of the admonition is indented. example Content of the admonition is indented. quote, cite Content of the admonition is indented.","title":"2. Admonition"},{"location":"blog/setup_blog/markdown_syntax/#3-attribute","text":"The Attribute Lists extension adds a syntax to define attributes on the various HTML elements in markdown\u2019s output. Enable the extension: markdown_extensions : - attr_list An example attribute list might look like this: { #someid .someclass somekey='somevalue' } Block attribute : To define attributes for a block level element, the attribute list should be defined on the last line of the block by itself. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. {style=\"font-style:italic;\"} Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. Element attribute : To define attributes on inline elements, the attribute list should be defined immediately after the inline element generated by markdown with no white space. This is a _green_ {style=\"color:green\"} word. This is a <span>green</span>{style=\"color:green\"} word. This is a green word. This is a non-green {style=\"color:green\"} word.","title":"3. Attribute"},{"location":"blog/setup_blog/markdown_syntax/#4-lists","text":"Markdown supports Ordered and Unordered lists. Extensions provide 2 more kinds of list as Tasks and Definitions . The Sane Lists extension alters the behavior of the Markdown List syntax to be less surprising. Sane Lists do not allow the mixing of list types. In other words, an ordered list will not continue when an unordered list item is encountered and vice versa. Enable the extension: markdown_extensions : - pymdownx.tasklist - def_list - sane_lists Ordered list : 1. Ordered item 1 1. Child 1 2. Child 2 2. Ordered item 2 Ordered item 1 Child 1 Child 2 Ordered item 2 Unordered list : * Unordered item 1 * Child 1 * Child 2 * Unordered item 2 Unordered item 1 Child 1 Child 2 Unordered item 2 Sane list : 1. Ordered item 1 2. Ordered item 2 * Unordered item 1 * Unordered item 2 Ordered item 1 Ordered item 2 Unordered item 1 Unordered item 2 Tasks : - [x] item 1 * [x] item A * [ ] item B - [ ] item 2 item 1 item A item B item 2 Definitions : Roses : are red Violets : are blue Roses are red Violets are blue","title":"4. Lists"},{"location":"blog/setup_blog/markdown_syntax/#5-code-blocks","text":"The SuperFences extension provides a number of features including allowing the nesting of fences, and ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Highlighting can be further controlled via the Highlight extension . Enable the extension: markdown_extensions : - pymdownx.superfences - pymdownx.highlight The format is as below: ```{ .language #id .class key=\"value\" linenums=\"n\" hl_lines=\"x y-z\"} codeblock content ``` or in simpler syntax which does not support id , class or custom key=value : ``` language linenums=\"n\" hl_lines=\"x y-z\" codeblock content ``` Option linenums = \"n\" creates line numbers starting from n . Option hl_lines = \"x y-z\" highlights the x-th line and lines in the range from y to z . Line numbers are always referenced starting at 1 ignoring what the line number is labeled by the option linenums = \"n\" . ``` c linenums=\"2\" hl_lines=\"1 4-5\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; }","title":"5. Code blocks"},{"location":"blog/setup_blog/markdown_syntax/#6-inline-code","text":"the InlineHilite extension is an inline code highlighter inspired by CodeHilite . Enable the extension: markdown_extensions : - pymdownx.inlinehilite Borrowing from CodeHilite's existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: `:::language mycode` or `#!language mycode` This will render as below example: A line of python code: `#!python [x for x in range(1, 10) if x % 2]` . A line of python code: [ x for x in range ( 1 , 10 ) if x % 2 ] .","title":"6. Inline code"},{"location":"blog/setup_blog/markdown_syntax/#7-images","text":"There are some extensions to add a caption to an image. After testing, markdown-captions is a good one that uses alt text to make caption, accepts markdown in alt text. ![ Caption ]( link to image ) Some images have big size that does not show the detail, therefore, it's better to zoom in by clicking on them, and pan the image on the screen. The view-bigimg library do that requirement well. Enable it by following Customize theme . For example: ![ Lorem Picsum ]( https://picsum.photos/1280/720 ) Lorem Picsum","title":"7. Images"},{"location":"blog/setup_blog/markdown_syntax/#8-tabs","text":"Tabbed extension provides a syntax to easily add tabbed Markdown content. Enable the extension: markdown_extensions : - pymdownx.tabbed Tabs start with === to signify a tab followed by a quoted title. Consecutive tabs are grouped into a tab set. === \"Tab 1\" Some texts === \"Tab 2\" Some other texts Inner tabs: === \"Tab A\" Text A === \"Tab B\" Text B Tab 1 Some texts Tab 2 Some other texts Inner tabs: Tab A Text A Tab B Text B","title":"8. Tabs"},{"location":"blog/setup_blog/markdown_syntax/#9-tables","text":"The Tables extension adds the ability to create tables in Markdown documents. Enable the extension: markdown_extensions : - tables Markdown Tables are written in pipe-line format: row is on one line, cell is inline text only. The 1 st line contains the column headers. The 2 nd line is to control text alignment in a column: :--- , :---: and ---: are left, center, and right alignment. | Syntax | Description | Test Text | | :--------- | :----------: | ----------: | | Left align | Center align | Right align | | Some texts | Some texts | Some texts | Syntax Description Test Text Left align Center align Right align Some texts Some texts Some texts","title":"9. Tables"},{"location":"blog/setup_blog/markdown_syntax/#10-formatting","text":"Carets : Caret optionally adds two different features which are syntactically built around the ^ character. Enable the extension: markdown_extensions : - pymdownx.caret The double carets ^^ inserts <ins></ins> tags, and the single caret ^ inserts <sup></sup> tags. ^^Insert me^^ H^2^0 Insert me H 2 0 Marks : Mark adds the ability to insert <mark></mark> tags. Enable the extension: markdown_extensions : - pymdownx.mark The syntax requires the text to be surrounded by double equal signs == . ==mark me== ==smart==mark== mark me smart==mark Tildes : The PyMdown extension optionally adds two different features which are syntactically built around the ~ character: delete using double tildes ~~ which inserts <del></del> tags and subscript using single tilde ~ which inserts <sub></sub> tags. Enable the extension: markdown_extensions : - pymdownx.tilde For example: ~~Delete me~~ CH~3~CH~2~OH Delete me CH 3 CH 2 OH","title":"10. Formatting"},{"location":"blog/setup_blog/markdown_syntax/#11-critic","text":"Critic is an extension that adds handling and support of Critic Markup which uses a special syntax to represent edits to a Markdown document. This extension runs before all other extensions to parse the critic edits. Enable the extension: markdown_extensions : - pymdownx.critic Critic Markup uses special markup to insert, delete, substitute, highlight, and comment. To insert or remove text you can use {\u200b++insert me++} and {\u200b--remove me--} respectively. You can also denote a substitution with {\u200b~~substitute this~>with this~~}. You can also highlight specific text with {\u200b==highlight me==}. Or even comment, which is generally done by highlighting text and following it with a comment: {\u200b==highlight me==}{\u200b>>Add a comment<<}. To insert or remove text you can use insert me and remove me respectively. You can also denote a substitution with substitute this with this . You can also highlight specific text with highlight me . Or even comment, which is generally done by highlighting text and following it with a comment: highlight me Add a comment .","title":"11. Critic"},{"location":"blog/setup_blog/markdown_syntax/#12-html-block","text":"The Markdown in HTML extension that parses Markdown inside of HTML block tags. Enable the extension: markdown_extensions : - md_in_html By default, Markdown ignores any content within a raw HTML block-level element. With the md-in-html extension enabled, the content of a raw HTML block-level element can be parsed as Markdown by including a markdown attribute on the opening tag. <div> This is __not parsed__ by Markdown. </div> <div markdown=\"1\"> This is a __bold__ word parsed by Markdown. </div> This is __not parsed__ by Markdown. This is a bold word parsed by Markdown.","title":"12. HTML block"},{"location":"blog/setup_blog/markdown_syntax/#13-icons--emojis","text":"The Emoji extension Enable the extension: markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg Emojis : Emojis can be written by putting the shortcode of the emoji between two colons. Look up the shortcodes at Emojipedia . :smile: :heart: Icons : Icons can be used similarly to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-24: \u2013 `.icons/octicons/octoface-24.svg` Include in theme : Using include function of Jinja to add an icon wrapped in a twemoji class: <span class=\"twemoji\"> {% include \".icons/fontawesome/brands/twitter.svg\" %} </span>","title":"13. Icons &amp; Emojis"},{"location":"blog/setup_blog/markdown_syntax/#14-custom-block","text":"The Custom Blocks extension defines a common markup to create parametrizable and nestable custom blocks. Install the extension: pip install -U markdown-customblocks Enable the extension: markdown_extensions : - customblocks This extension parses markup structures like this one: ::: mytype \"value 1\" param2=value2 Indented content Example usage : Add the filename of a codeblock, to show where the it belongs. Syntax: ::: file main.c ``` cpp int main(void) { return 0; } ``` with style: . md-typeset . file > p { font-size : .9 em ; font-style : italic ; color : darkred ; margin-bottom : -1.2 em ; } will generate: main.c int main ( void ) { return 0 ; }","title":"14. Custom block"},{"location":"blog/setup_blog/markdown_syntax/#15-footnotes","text":"The Footnotes extension adds syntax for defining footnotes in Markdown documents. Enable the extension: markdown_extensions : - footnotes And use the following syntax: Footnotes[^1] have a label[^fn] and the footnote's content. [ ^1 ]: This is a footnote content. [ ^fn ]: A footnote on the label _fn_. to get: Footnotes 1 have a label 2 and the footnote's content. This is a footnote content. \u21a9 A footnote on the label fn . \u21a9","title":"15. Footnotes"},{"location":"blog/setup_blog/mkdocs_plugins/","text":"1. Awesome Pages \u2693\ufe0e MkDocs Awesome Pages plugin simplifies configuring page titles and their entries order. Install the plugin: pip install -U mkdocs-awesome-pages-plugin Enable the extension: plugins : - search # built-in search must be always activated - awesome-pages It overrides the nav sections in the site config file mkdocs.yml , and provides some extra configs: Create a YAML file named .pages in a directory and use the nav attribute to customize the navigation on that level. List the files and subdirectories in the order that they should appear in the navigation. A ... entry to specify where all remaining items should be inserted. It can filter the remaining items using glob patterns or regular expressions. e.g. nav : - ... | introduction-*.md - ... - summary.md The pattern is checked against the basename of remaining items - not their whole path. Optionally specify a title for the navigation entry Add additional links to the navigation entry. e.g. nav : - ... - First page : page1.md - Link Title : https://lukasgeiter.com Hide directory by setting the hide attribute to true . Set directory title using the title attribute. Collapse single nested pages by setting collapse_single_pages to true . 2. Macros \u2693\ufe0e MkDocs macro plugin is a plugin/framework that makes it easy to produce richer and more beautiful pages. It can do two things: Transforming the markdown pages into Jinja2 templates that use variables, calls to macros and custom filters. Replacing MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the html pages have already been generated etc. Install the plugin: pip install -U mkdocs-macros-plugin Enable the extension: plugins : - search # built-in search must be always activated - macros incomplete data The macro {{ navigation.pages }} contains a list of all pages, but the data of each page maybe not complete, such as title or meta-data. 3. Mermaid \u2693\ufe0e MkDocs Mermaid2 plugin is a plugin to render textual graph description into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Install the plugin: pip install -U mkdocs-mermaid2-plugin Enable the extension: plugins : - search # built-in search must be always activated - mermaid2 And configure the codeblock parser for mermaid2 blocks: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:mermaid2.fence_mermaid Example: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` will render as: graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"MkDocs plugins"},{"location":"blog/setup_blog/mkdocs_plugins/#1-awesome-pages","text":"MkDocs Awesome Pages plugin simplifies configuring page titles and their entries order. Install the plugin: pip install -U mkdocs-awesome-pages-plugin Enable the extension: plugins : - search # built-in search must be always activated - awesome-pages It overrides the nav sections in the site config file mkdocs.yml , and provides some extra configs: Create a YAML file named .pages in a directory and use the nav attribute to customize the navigation on that level. List the files and subdirectories in the order that they should appear in the navigation. A ... entry to specify where all remaining items should be inserted. It can filter the remaining items using glob patterns or regular expressions. e.g. nav : - ... | introduction-*.md - ... - summary.md The pattern is checked against the basename of remaining items - not their whole path. Optionally specify a title for the navigation entry Add additional links to the navigation entry. e.g. nav : - ... - First page : page1.md - Link Title : https://lukasgeiter.com Hide directory by setting the hide attribute to true . Set directory title using the title attribute. Collapse single nested pages by setting collapse_single_pages to true .","title":"1. Awesome Pages"},{"location":"blog/setup_blog/mkdocs_plugins/#2-macros","text":"MkDocs macro plugin is a plugin/framework that makes it easy to produce richer and more beautiful pages. It can do two things: Transforming the markdown pages into Jinja2 templates that use variables, calls to macros and custom filters. Replacing MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the html pages have already been generated etc. Install the plugin: pip install -U mkdocs-macros-plugin Enable the extension: plugins : - search # built-in search must be always activated - macros incomplete data The macro {{ navigation.pages }} contains a list of all pages, but the data of each page maybe not complete, such as title or meta-data.","title":"2. Macros"},{"location":"blog/setup_blog/mkdocs_plugins/#3-mermaid","text":"MkDocs Mermaid2 plugin is a plugin to render textual graph description into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Install the plugin: pip install -U mkdocs-mermaid2-plugin Enable the extension: plugins : - search # built-in search must be always activated - mermaid2 And configure the codeblock parser for mermaid2 blocks: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:mermaid2.fence_mermaid Example: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` will render as: graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"3. Mermaid"},{"location":"blog/setup_blog/print_to_pdf/","text":"1. Print plugin \u2693\ufe0e The MkDocs PDF with JS Plugin 1 exports documentation as PDF with rendered JavaScript content. This is very useful if documents have mermaid diagrams. A download button will be added to the top of the documentation. For executing the JavaScript code ChromeDriver is used. So it is nesseccary to: Install Chrome Download ChromeDriver Add the ChromeDriver to OS user's PATH Install the plugin: pip install -U git+https://github.com/vuquangtrong/mkdocs-pdf-with-js-plugin.git Install original plugin with pip install mkdocs-pdf-with-js-plugin if don't need a customized version Enable the plugin: plugins : - search # built-in search must be always activated - pdf-with-js While building mkdocs build or serving mkdocs serve the documentation, the pdfs get generated. They are stored in site_dir/pdfs . This is a modification in the plugin MkDocs PDF with JS Plugin , if it's installed, it is ready to use without any further changes showing in below sections 2. Add download button \u2693\ufe0e Create an element to contain the download button at the beginning of the document content in the base.html template: <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if not page.is_homepage %} <div class=\"btn-actions\"></div> {% endif %} {{ page.content }} ... {% endblock %} </article> </div> The plugin will find the < div class = \"btn-actions\" > element to insert a button: .venv\\Lib\\site-packages\\pdf_with_js\\printer.py def _add_link ( self , soup , page_paths ): icon = BeautifulSoup ( '' '<span class=\"twemoji\">' '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">' '<path d=\"M5 20h14v-2H5m14-9h-4V3H9v6H5l7 7 7-7z\"></path>' '</svg>' '</span>' , 'html.parser' ) text = \"PDF\" btn = soup . new_tag ( \"a\" , href = page_paths [ \"relpath\" ]) btn . append ( icon ) btn . append ( text ) btn [ 'class' ] = 'md-button' div = soup . new_tag ( \"div\" ) div [ 'id' ] = 'btn-download' div . append ( btn ) bar = soup . find ( \"div\" , { \"class\" : \"btn-actions\" }) if bar : bar . insert ( 0 , div ) return soup 3. Add header and footer \u2693\ufe0e The command sent to ChromeDriver to print a page is Page.printToPDF , read more at Chrome DevTools Protocol - printToPDF . Some important params: landscape : boolean Paper orientation. Defaults to false . displayHeaderFooter : boolean Display header and footer. Defaults to false . headerTemplate : : string HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date : formatted print date title : document title url : document location pageNumber : current page number totalPages : total pages in the document For example, < span class = title ></ span > would generate span containing the title. footerTemplate : string HTML template for the print footer. Should use the same format as the headerTemplate. Initialize default value for those params: def __init__ ( self ): self . pages = [] self . filenameUseFullTitle = False self . displayHeaderFooter = True self . headerTemplate = '<div style=\"font-size:8px; margin:auto;\">' \\ '<span class=title></span>' \\ '</div>' self . footerTemplate = '<div style=\"font-size:8px; margin:auto;\">' \\ 'Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span>' \\ '</div>' then create print options in json format: def _get_print_options ( self ): return { 'landscape' : False , 'displayHeaderFooter' : self . displayHeaderFooter , 'footerTemplate' : self . footerTemplate , 'headerTemplate' : self . headerTemplate , 'printBackground' : True , 'preferCSSPageSize' : True , } and use it when calling the print command: def print_to_pdf ( self , driver , page ): driver . get ( page [ \"url\" ]) result = self . _send_devtools_command ( driver , \"Page.printToPDF\" , self . _get_print_options ()) self . _write_file ( result [ 'data' ], page [ \"pdf_file\" ]) 4. Add plugin config option \u2693\ufe0e To allow user to change the print option in the project config file mkdocs.yml , add the config fields into the plugin.py file. class PdfWithJS ( BasePlugin ): config_scheme = ( ( 'enable' , config_options . Type ( bool , default = True )), ( 'filename_use_full_title' , config_options . Type ( bool , default = False )), ( 'display_header_footer' , config_options . Type ( bool , default = False )), ( 'header_template' , config_options . Type ( str , default = '' )), ( 'footer_template' , config_options . Type ( str , default = '' )), ) when the MkDocs engine calls to on_config() function in this plugin, save the user's configs as below: def on_config ( self , config , ** kwargs ): self . enabled = self . config [ 'enable' ] self . printer . set_config ( self . config [ 'filename_use_full_title' ], self . config [ 'display_header_footer' ], self . config [ 'header_template' ], self . config [ 'footer_template' ] ) return config 5. Printing styles \u2693\ufe0e When printing, many elements should not show or have different style to fit the paper size or match with overall style on paper. Change the look of elements by adding styles in the additional stylesheet assets\\extra.css . extra.css 5.1. Cover page \u2693\ufe0e The first page should show the topic and a short description of the post. Create an element named page-cover in the base.html template: {% block content %} <div class=\"page-cover\"> {% if not \"\\x3ch1\" in page.content %} {% if page and page.meta and page.meta.title_full %} <h1 class=\"page-title\"> {{ page.meta.title_full | d ( config.site_name , true ) }} </h1> {% elif page and page.meta and page.meta.title %} <h1 class=\"page-title\"> {{ page.meta.title | d ( config.site_name , true ) }} </h1> {% else %} <h1 class=\"page-title\"> {{ config.site_name }} </h1> {% endif %} {% if page and page.meta and page.meta.description %} <p class=\"page-description\"> {{ page.meta.description }} </p> {% endif %} {% if page and page.meta and page.meta.tags %} <p> {% for tag in page.meta.tags %} <a class=\"tag\" href=\" {{ config.site_url }} tags/# {{ tag }} \"> <span class=\"tag-name\" style=\"color: {{ random_color () }} ;\"> # {{ tag }} </span> </a> {% endfor %} </p> {% endif %} {% endif %} </div> {% if not page.is_homepage %} <div class=\"btn-actions screen-only\"></div> <div class=\"toc print-only\"> <h2>Table of Content</h2> {% include \"partials/toc.html\" %} </div> {% endif %} {{ page.content }} The page cover will use 100% height of the paper and align its content vertically: @ media print { . md-typeset . page-cover { height : 100 vh ; display : flex ; flex-direction : column ; justify-content : center ; } } originally developed by smaxtec \u21a9","title":"Print to PDF"},{"location":"blog/setup_blog/print_to_pdf/#1-print-plugin","text":"The MkDocs PDF with JS Plugin 1 exports documentation as PDF with rendered JavaScript content. This is very useful if documents have mermaid diagrams. A download button will be added to the top of the documentation. For executing the JavaScript code ChromeDriver is used. So it is nesseccary to: Install Chrome Download ChromeDriver Add the ChromeDriver to OS user's PATH Install the plugin: pip install -U git+https://github.com/vuquangtrong/mkdocs-pdf-with-js-plugin.git Install original plugin with pip install mkdocs-pdf-with-js-plugin if don't need a customized version Enable the plugin: plugins : - search # built-in search must be always activated - pdf-with-js While building mkdocs build or serving mkdocs serve the documentation, the pdfs get generated. They are stored in site_dir/pdfs . This is a modification in the plugin MkDocs PDF with JS Plugin , if it's installed, it is ready to use without any further changes showing in below sections","title":"1. Print plugin"},{"location":"blog/setup_blog/print_to_pdf/#2-add-download-button","text":"Create an element to contain the download button at the beginning of the document content in the base.html template: <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if not page.is_homepage %} <div class=\"btn-actions\"></div> {% endif %} {{ page.content }} ... {% endblock %} </article> </div> The plugin will find the < div class = \"btn-actions\" > element to insert a button: .venv\\Lib\\site-packages\\pdf_with_js\\printer.py def _add_link ( self , soup , page_paths ): icon = BeautifulSoup ( '' '<span class=\"twemoji\">' '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">' '<path d=\"M5 20h14v-2H5m14-9h-4V3H9v6H5l7 7 7-7z\"></path>' '</svg>' '</span>' , 'html.parser' ) text = \"PDF\" btn = soup . new_tag ( \"a\" , href = page_paths [ \"relpath\" ]) btn . append ( icon ) btn . append ( text ) btn [ 'class' ] = 'md-button' div = soup . new_tag ( \"div\" ) div [ 'id' ] = 'btn-download' div . append ( btn ) bar = soup . find ( \"div\" , { \"class\" : \"btn-actions\" }) if bar : bar . insert ( 0 , div ) return soup","title":"2. Add download button"},{"location":"blog/setup_blog/print_to_pdf/#3-add-header-and-footer","text":"The command sent to ChromeDriver to print a page is Page.printToPDF , read more at Chrome DevTools Protocol - printToPDF . Some important params: landscape : boolean Paper orientation. Defaults to false . displayHeaderFooter : boolean Display header and footer. Defaults to false . headerTemplate : : string HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date : formatted print date title : document title url : document location pageNumber : current page number totalPages : total pages in the document For example, < span class = title ></ span > would generate span containing the title. footerTemplate : string HTML template for the print footer. Should use the same format as the headerTemplate. Initialize default value for those params: def __init__ ( self ): self . pages = [] self . filenameUseFullTitle = False self . displayHeaderFooter = True self . headerTemplate = '<div style=\"font-size:8px; margin:auto;\">' \\ '<span class=title></span>' \\ '</div>' self . footerTemplate = '<div style=\"font-size:8px; margin:auto;\">' \\ 'Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span>' \\ '</div>' then create print options in json format: def _get_print_options ( self ): return { 'landscape' : False , 'displayHeaderFooter' : self . displayHeaderFooter , 'footerTemplate' : self . footerTemplate , 'headerTemplate' : self . headerTemplate , 'printBackground' : True , 'preferCSSPageSize' : True , } and use it when calling the print command: def print_to_pdf ( self , driver , page ): driver . get ( page [ \"url\" ]) result = self . _send_devtools_command ( driver , \"Page.printToPDF\" , self . _get_print_options ()) self . _write_file ( result [ 'data' ], page [ \"pdf_file\" ])","title":"3. Add header and footer"},{"location":"blog/setup_blog/print_to_pdf/#4-add-plugin-config-option","text":"To allow user to change the print option in the project config file mkdocs.yml , add the config fields into the plugin.py file. class PdfWithJS ( BasePlugin ): config_scheme = ( ( 'enable' , config_options . Type ( bool , default = True )), ( 'filename_use_full_title' , config_options . Type ( bool , default = False )), ( 'display_header_footer' , config_options . Type ( bool , default = False )), ( 'header_template' , config_options . Type ( str , default = '' )), ( 'footer_template' , config_options . Type ( str , default = '' )), ) when the MkDocs engine calls to on_config() function in this plugin, save the user's configs as below: def on_config ( self , config , ** kwargs ): self . enabled = self . config [ 'enable' ] self . printer . set_config ( self . config [ 'filename_use_full_title' ], self . config [ 'display_header_footer' ], self . config [ 'header_template' ], self . config [ 'footer_template' ] ) return config","title":"4. Add plugin config option"},{"location":"blog/setup_blog/print_to_pdf/#5-printing-styles","text":"When printing, many elements should not show or have different style to fit the paper size or match with overall style on paper. Change the look of elements by adding styles in the additional stylesheet assets\\extra.css . extra.css","title":"5. Printing styles"},{"location":"blog/setup_blog/print_to_pdf/#51-cover-page","text":"The first page should show the topic and a short description of the post. Create an element named page-cover in the base.html template: {% block content %} <div class=\"page-cover\"> {% if not \"\\x3ch1\" in page.content %} {% if page and page.meta and page.meta.title_full %} <h1 class=\"page-title\"> {{ page.meta.title_full | d ( config.site_name , true ) }} </h1> {% elif page and page.meta and page.meta.title %} <h1 class=\"page-title\"> {{ page.meta.title | d ( config.site_name , true ) }} </h1> {% else %} <h1 class=\"page-title\"> {{ config.site_name }} </h1> {% endif %} {% if page and page.meta and page.meta.description %} <p class=\"page-description\"> {{ page.meta.description }} </p> {% endif %} {% if page and page.meta and page.meta.tags %} <p> {% for tag in page.meta.tags %} <a class=\"tag\" href=\" {{ config.site_url }} tags/# {{ tag }} \"> <span class=\"tag-name\" style=\"color: {{ random_color () }} ;\"> # {{ tag }} </span> </a> {% endfor %} </p> {% endif %} {% endif %} </div> {% if not page.is_homepage %} <div class=\"btn-actions screen-only\"></div> <div class=\"toc print-only\"> <h2>Table of Content</h2> {% include \"partials/toc.html\" %} </div> {% endif %} {{ page.content }} The page cover will use 100% height of the paper and align its content vertically: @ media print { . md-typeset . page-cover { height : 100 vh ; display : flex ; flex-direction : column ; justify-content : center ; } } originally developed by smaxtec \u21a9","title":"5.1. Cover page"},{"location":"blog/tools/jupyter_lab_virtual_env/2021-05-13-jupyterLabVirtualEnv/","text":"Jupyter Lab \u2693\ufe0e JupyterLab is the next-generation Jupyter notebook with more comprehensive user interface. The interface is highly modular and customizable. If you have worked with JupyterLab, you might be realized that the JupyterLab only consists of the virtual environment you created through Anaconda, but those virtual environments created through venv or virtualenv are not found inside the launcher. While IPython kernel is always available in JupyterLab, other version of Python and virtual environment might not available when you start the JupyterLab. That's being said, we got to add the virtual environment to JupyterLab manually. Setting up Virtual Environment \u2693\ufe0e To add the virtual environment, first, make sure that the virtual environment is created and activated. For windows, we can create the virtual environment with PowerShell by typing the following command: python -m venv env Next, we need to activate the virtual environment (i.e., the env that we have created). env/Scripts/activate Check if ipykernel is installed, we can use pip list to list down a list of installed packages. jpg If ipykernel is not installed, install the ipykernel which provides the IPython kernel for JupyterLab. pip install ipykernel Adding Virtual Environment \u2693\ufe0e Once it is installed, we can add the virtual environment we created just now to JupyterLab. To add the virtual environment, enter the following command: python -m ipykernel install --name=env You should get the following output: JPG The output said that the kernelspec env is installed in the above directory (i.e., C:\\ProgramData\\jupyter\\kernels\\env in this case). Navigate to the said directory, you can see that the folder containing your environment spec. JPG Inside the folder, you will find a kernel.json file containing the information of your virtual environment env . JPG If you open the kernel.json , you should see that it contains the following information: JPG Now, if you open the JupyterLab again, you can find your virtual environment env inside the Launcher JPG Remove the manually added Kernelspec from JupyterLab \u2693\ufe0e You can check the list of kernels you have in your JupyterLab with the following command: jupyter kernelspec list You should see env inside the list. JPG If you would like to remove the virtual environment env from JupyterLab, type in the following command to uninstall the kernelspec. jupyter kernelspec uninstall env JPG The output shows that the kernelspec is successfully removed.","title":"Adding Virtual Environment to Jupyter Lab"},{"location":"blog/tools/jupyter_lab_virtual_env/2021-05-13-jupyterLabVirtualEnv/#jupyter-lab","text":"JupyterLab is the next-generation Jupyter notebook with more comprehensive user interface. The interface is highly modular and customizable. If you have worked with JupyterLab, you might be realized that the JupyterLab only consists of the virtual environment you created through Anaconda, but those virtual environments created through venv or virtualenv are not found inside the launcher. While IPython kernel is always available in JupyterLab, other version of Python and virtual environment might not available when you start the JupyterLab. That's being said, we got to add the virtual environment to JupyterLab manually.","title":"Jupyter Lab"},{"location":"blog/tools/jupyter_lab_virtual_env/2021-05-13-jupyterLabVirtualEnv/#setting-up-virtual-environment","text":"To add the virtual environment, first, make sure that the virtual environment is created and activated. For windows, we can create the virtual environment with PowerShell by typing the following command: python -m venv env Next, we need to activate the virtual environment (i.e., the env that we have created). env/Scripts/activate Check if ipykernel is installed, we can use pip list to list down a list of installed packages. jpg If ipykernel is not installed, install the ipykernel which provides the IPython kernel for JupyterLab. pip install ipykernel","title":"Setting up Virtual Environment"},{"location":"blog/tools/jupyter_lab_virtual_env/2021-05-13-jupyterLabVirtualEnv/#adding-virtual-environment","text":"Once it is installed, we can add the virtual environment we created just now to JupyterLab. To add the virtual environment, enter the following command: python -m ipykernel install --name=env You should get the following output: JPG The output said that the kernelspec env is installed in the above directory (i.e., C:\\ProgramData\\jupyter\\kernels\\env in this case). Navigate to the said directory, you can see that the folder containing your environment spec. JPG Inside the folder, you will find a kernel.json file containing the information of your virtual environment env . JPG If you open the kernel.json , you should see that it contains the following information: JPG Now, if you open the JupyterLab again, you can find your virtual environment env inside the Launcher JPG","title":"Adding Virtual Environment"},{"location":"blog/tools/jupyter_lab_virtual_env/2021-05-13-jupyterLabVirtualEnv/#remove-the-manually-added-kernelspec-from-jupyterlab","text":"You can check the list of kernels you have in your JupyterLab with the following command: jupyter kernelspec list You should see env inside the list. JPG If you would like to remove the virtual environment env from JupyterLab, type in the following command to uninstall the kernelspec. jupyter kernelspec uninstall env JPG The output shows that the kernelspec is successfully removed.","title":"Remove the manually added Kernelspec from JupyterLab"},{"location":"bluetooth/bluetooth/","text":"--","title":"About Bluetooth"},{"location":"bluetooth/contact_tracing/2021-04-15-contactTracing/","text":"Last year about the same time, we developed a project, smart contact tracing based on BLE signals, in view of the viral spread of Covid-19. The project is funded by NSERC Alliance COVID-19 . jpg Here are a collection of news related to our project: https://www.guelphmercury.com/community-story/10038008-u-of-guelph-says-they-can-improve-accuracy-and-privacy-of-ontario-s-covid-19-contact-tracing-app/ https://www.guelphmercury.com/community-story/10038008-u-of-guelph-says-they-can-improve-accuracy-and-privacy-of-ontario-s-covid-19-contact-tracing-app/ https://mobilesyrup.com/2020/06/20/university-guelph-contact-tracing-app-machine-learning-accuracy/ https://porticomagazine.ca/2020/10/u-of-g-app-could-improve-covid-19-contact-tracing/ https://www.kitchenertoday.com/regional-news/engineers-at-university-of-guelph-develop-covid-19-tracing-app-2511739 https://guides.uoguelph.ca/2020/06/u-of-g-contact-tracing-app-could-help-improve-accuracy-of-the-technology/ https://issuu.com/uofguelph/docs/portico_magazine_fall_2020 This work is published in the following IEEE Journal:","title":"Smart Contact Tracing Project at University of Guelph"},{"location":"deep_learning/","text":"-- ..","title":"Deep Learning"},{"location":"deep_learning/timeseries/dtw/","text":"Dynamic Time Warping (DTW) is a non-linear similarity computation method that dynamically compute the similarity between time series data when the time indices between data points from time series A and time series B do not match. Consider the two time series sequences (time series A in green, and time series B in blue) shown in Figure below, these two sequences do not line up in time axis. However, both of them have some similarities in terms of their component shapes. If traditional distance metrics (e.g., Euclidean distance, Manhattan distance, etc.) are used to compute the distance between the $$i$$th point of time series A with the $$i$$th point of time series B, it will most probably produce a poor similarity score. If a non-linear mapping can be used to match the similar shape of two time series even though these two time series sequences are out of phase in the time axis, it will produce a more intuitive similarity measure. This can be done by warping the time axis of one sequences to align the time axis. DTW can efficiently align two time series sequences, allowing a more intuitive similarity measure between out of sync data points. Warping Function \u2693\ufe0e DTW uses warping function to find the best alignment between two time series sequences. The objective is to find the path through the grids $$ P = P_1, P_2, ..., P_s, ..., P_k $$ $$ P_s = (i, j) $$ which minimizes the total distance between them. DTW aims to learn a warping path that dynamically maps the data points of time series A to data points of time series B. Let $$A$$ and $$B$$ be time series A and B, respectively, we can compute the time normalized distance between these two time series: $$ D(A, B) = \\frac{\\sum_{s=1}^k d(P_s) w_s}{\\sum_{s=1}^k w_s} $$ where $$d(P_s) = d(v_i, v_j)$$ is the distance between value at $$i$$th point $$v_i$$ and value at $$j$$th point $$v_j$$, and $$w_s$$ is the weight coefficient. Considering the Figure above, there are many possible warping paths through the grid. That's being said, to search for an optimum path, i.e., $$ P_o = arg\\min_P (D(A, B)) $$ can be extremely hard when the grid size is big. Furthermore, if a single point of time series A can map onto a large subsection of time series B, it will lead to an unintuitive alignment. Over the decade, a few constraints have been imposed on the warping function: 1. Monotonicity \u2693\ufe0e Monotonicity ensures that the warping path does not go back in time. Given $$P_s = (i, j)$$ and $$P_{s-1} = (i', j')$$, $$i \\leq i'$$ and $$j \\leq j'$$ forces the points in $$P$$ to be monotonically spaced in time 2. Continuity \u2693\ufe0e Continuity ensures that the warping path does not jump in time. Given $$P_s = (i, j)$$ and $$P_{s-1} = (i', j')$$, $$i - i' \\leq 1$$ and $$j - j' \\leq 1$$ restricts the allowable steps in the warping path to adjacent cells. 3. Boundary Conditions \u2693\ufe0e The boundary of the warping path states that the part should start at $$P_1 = (1, 1)$$ and end at $$P_s = (m, n)$$, i.e., the warping path needs to start and finish in diagonally opposite corner of the grid. This is important to make sure the warping path does not consider only partial of the sequence. 4. Warping Window \u2693\ufe0e Let $$r>0$$ be the length of warping window, $$|i - j| \\leq r$$ restricts allowable grid points for the warping path. The warping window ensures that the warping path does not wander too far away from the diagonal. This guarantees that the alignment will not get stuck at similar features. 5. Slope Constraint \u2693\ufe0e Slope constraint ensures that the warping path is neither too steep or too shallow. Let $$q$$ and $$p$$ be the number of steps in the x-direction and y-direction given the grid, then $$\\frac{j_{p} - j_{0}}{i_{p} - i_{0}} \\leq p$$ and $$\\frac{i_{q} - i_{0}}{j_{q} - j_{0}} \\leq q$$. That is, after $$q$$ steps in x one must step in y and vice versa. Dynamic Programming \u2693\ufe0e Dynamic Programming is an efficient method to find the warping path. In general, dynamic programming evaluate the cumulative distance $$\\gamma(i, j)$$ based on the distance $d(P_s)$ at the current cell and the minimum of the cumulative distances of the adjacent elements. Mathematically, $$ \\gamma(i, j) = d(P_s) + \\min {\\gamma(i-1, j-1), \\gamma(i-1, j), \\gamma(i, j-1)} $$ where $$d(P_s) = d(v_i, v_j)$$ can be calculated by taking the absolute difference between value at $$i$$th point and value at $$j$$point, i.e., $$d(v_i, v_j) = |v_i - v_j|$$ Example \u2693\ufe0e Suppose that we have two time series A and B as follows: $$ A = [ 3, 2, 2, 3, 5, 5, 6 ] $$ $$ B = [ 1, 3, 2, 2, 3, 5 ] $$ First, let's consider point $$P_s = (1,1)$$, i.e., $$i=1$$ and $$j=1$$, the value at $$i=1$$ is $$v(i=1) = 3$$ and the value at $$j=1$$ is $$v(j=1) = 1$$. Hence, the absolute distance at point $$P_s = (1,1)$$ is $$d(P_s) = |3-1| = 2$$. Since the values at the cell above, left and diagonally above $$P_s$$ are all empty, hence, $$\\min {\\gamma(i-1, j-1), \\gamma(i-1, j), \\gamma(i, j-1)} = 0$$. The cumulative distance $$\\gamma(i=1, j=1)$$ will be 2, as shown in Figure below. Let's consider another point $$P_s = (4,4)$$, here we have $$v(i=4) = 3$$ and $$v(j=4) = 2$$. Hence, the absolute distance at point $$P_s = (4,4)$$ is $$d(P_s) = |3-2| = 1$$. The values at the adjacent cells (above, left and diagonally above ) are 3, 2 and 2. By taking the minimum value, we have 2. So, the cumulative distance $$\\gamma(i=4, j=4)$$ will be 3, as shown in Figure below. Figure below shows the final grid (or matrix) with all the value computed. The warping path can be obtained by backtracking from the end point to the beginning point as shown below. Implementation \u2693\ufe0e Here we will walkthrough a simple implementation of above example in Python. First, define the two time series A and B A = np . array ([ 3 , 2 , 2 , 3 , 5 , 5 , 6 ]) B = np . array ([ 1 , 3 , 2 , 2 , 3 , 5 ]) Initialize a dtw matrix based on the length of A and B, i.e., length of B define the number of rows, and length of A define the number of columns. dtw_mat = np . zeros (( len ( B ), len ( A ))) print ( dtw_mat ) output : [[0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.]] Now, we need to loop through all element in the dtw matrix, and compute the cumulative distance. # define the absolute distance function d = lambda x , y : np . abs ( x - y ) for i in range ( len ( B )): for j in range ( len ( A )): if i == 0 and j == 0 : dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) else : if i == 0 and j > 0 : choice = dtw_mat [ i , j - 1 ] elif i > 0 and j == 0 : choice = dtw_mat [ i - 1 , j ] else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) + np . min ( choice ) print ( dtw_mat ) output : [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] We can find the warping path by backtracking. path = [[ len ( B ) - 1 , len ( A ) - 1 ]] while ( True ): print ( path ) i , j = path [ - 1 ][ 0 ], path [ - 1 ][ 1 ] if i == 0 and j == 0 : break elif i == 0 and j > 0 : path . append ([ i , j - 1 ]) elif i > 0 and j == 0 : path . append ([ i - 1 , j ]) else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] ind = [[ i - 1 , j ], [ i , j - 1 ], [ i - 1 , j - 1 ]] k = np . argmin ( choice ) path . append ( ind [ k ]) warp = np . zeros (( len ( B ), len ( A ))) for p in path : warp [ p [ 0 ], p [ 1 ]] = 1 print ( warp ) output : [[1. 0. 0. 0. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 0.] [0. 1. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0. 0.] [0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 1. 1. 1.]] Then, we can calculate the normalized distance between time series A and time series B. Assume that all the point shares equal weight, i.e., $$w_s=1$$ for all $$P_s$$, then $$D(A,B)$$ can be computed as follows: $$ D(A,B) = \\frac{1}{k} \\sum_{s = 1}^k d(P_s) $$ D = np . sum ( warp * dtw_mat ) / len ( path ) print ( f 'Normalized Distance: { D : 2f } ' ) output: Normalized Distance: 2.111111 Wrap Up the Implementation with function \u2693\ufe0e We can also define a few functions to handle the DTW matrix computation, get the warping path and also compute the normalized distance. def computed_dtwMat ( A , B ): d = lambda x , y : np . abs ( x - y ) for i in range ( len ( B )): for j in range ( len ( A )): if i == 0 and j == 0 : dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) else : if i == 0 and j > 0 : choice = dtw_mat [ i , j - 1 ] elif i > 0 and j == 0 : choice = dtw_mat [ i - 1 , j ] else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) + np . min ( choice ) return dtw_mat We can call the above function by providing time series A and time series B as input arguments, and it will return the dtw_mat . dtw_mat = computed_dtwMat ( A , B ) print ( dtw_mat ) output : [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] We can define a function to get the warping path. def get_warpingPath ( A , B ): dtw_mat = computed_dtwMat ( A , B ) path = [[ len ( B ) - 1 , len ( A ) - 1 ]] while ( True ): i , j = path [ - 1 ][ 0 ], path [ - 1 ][ 1 ] if i == 0 and j == 0 : break elif i == 0 and j > 0 : path . append ([ i , j - 1 ]) elif i > 0 and j == 0 : path . append ([ i - 1 , j ]) else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] ind = [[ i - 1 , j ], [ i , j - 1 ], [ i - 1 , j - 1 ]] k = np . argmin ( choice ) path . append ( ind [ k ]) warp = np . zeros (( len ( B ), len ( A ))) for p in path : warp [ p [ 0 ], p [ 1 ]] = 1 ``` python path , warp , dtw_matrix = get_warpingPath ( A , B ) print ( warp ) print ( dtw_mat ) output : [[1. 0. 0. 0. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 0.] [0. 1. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0. 0.] [0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 1. 1. 1.]] [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] Finally, we can have a function to compute the normalized distance. def normalized_dist ( A , B ): path , warp , dtw_matrix = get_warpingPath ( A , B ) D = np . sum ( warp * dtw_mat ) / len ( path ) return D By calling the function normalized_dist , it will return us the normalized distance between time series A and time series B. D = normalized_dist ( A , B ) print ( f 'Normalized Distance: { D : 2f } ' ) output : Normalized Distance: 2.111111 Summary \u2693\ufe0e A python script containing all the above functions is provided here You can also refer to the example notebook here on how to apply those functions. There is also a useful dtw-python package provided by Toni dot Giorgino. You can visit his site for more information about dtw-python package. You can also install the package by issuing the following command: pip install dtw-python . DTW is available in Matlab through the Signal Processing Toolbox. For more information about using DTW with Matlab, check out the Matlab documentation about DTW here .","title":"Dynamic Time Warping"},{"location":"deep_learning/timeseries/dtw/#warping-function","text":"DTW uses warping function to find the best alignment between two time series sequences. The objective is to find the path through the grids $$ P = P_1, P_2, ..., P_s, ..., P_k $$ $$ P_s = (i, j) $$ which minimizes the total distance between them. DTW aims to learn a warping path that dynamically maps the data points of time series A to data points of time series B. Let $$A$$ and $$B$$ be time series A and B, respectively, we can compute the time normalized distance between these two time series: $$ D(A, B) = \\frac{\\sum_{s=1}^k d(P_s) w_s}{\\sum_{s=1}^k w_s} $$ where $$d(P_s) = d(v_i, v_j)$$ is the distance between value at $$i$$th point $$v_i$$ and value at $$j$$th point $$v_j$$, and $$w_s$$ is the weight coefficient. Considering the Figure above, there are many possible warping paths through the grid. That's being said, to search for an optimum path, i.e., $$ P_o = arg\\min_P (D(A, B)) $$ can be extremely hard when the grid size is big. Furthermore, if a single point of time series A can map onto a large subsection of time series B, it will lead to an unintuitive alignment. Over the decade, a few constraints have been imposed on the warping function:","title":"Warping Function"},{"location":"deep_learning/timeseries/dtw/#1-monotonicity","text":"Monotonicity ensures that the warping path does not go back in time. Given $$P_s = (i, j)$$ and $$P_{s-1} = (i', j')$$, $$i \\leq i'$$ and $$j \\leq j'$$ forces the points in $$P$$ to be monotonically spaced in time","title":"1. Monotonicity"},{"location":"deep_learning/timeseries/dtw/#2-continuity","text":"Continuity ensures that the warping path does not jump in time. Given $$P_s = (i, j)$$ and $$P_{s-1} = (i', j')$$, $$i - i' \\leq 1$$ and $$j - j' \\leq 1$$ restricts the allowable steps in the warping path to adjacent cells.","title":"2. Continuity"},{"location":"deep_learning/timeseries/dtw/#3-boundary-conditions","text":"The boundary of the warping path states that the part should start at $$P_1 = (1, 1)$$ and end at $$P_s = (m, n)$$, i.e., the warping path needs to start and finish in diagonally opposite corner of the grid. This is important to make sure the warping path does not consider only partial of the sequence.","title":"3. Boundary Conditions"},{"location":"deep_learning/timeseries/dtw/#4-warping-window","text":"Let $$r>0$$ be the length of warping window, $$|i - j| \\leq r$$ restricts allowable grid points for the warping path. The warping window ensures that the warping path does not wander too far away from the diagonal. This guarantees that the alignment will not get stuck at similar features.","title":"4. Warping Window"},{"location":"deep_learning/timeseries/dtw/#5-slope-constraint","text":"Slope constraint ensures that the warping path is neither too steep or too shallow. Let $$q$$ and $$p$$ be the number of steps in the x-direction and y-direction given the grid, then $$\\frac{j_{p} - j_{0}}{i_{p} - i_{0}} \\leq p$$ and $$\\frac{i_{q} - i_{0}}{j_{q} - j_{0}} \\leq q$$. That is, after $$q$$ steps in x one must step in y and vice versa.","title":"5. Slope Constraint"},{"location":"deep_learning/timeseries/dtw/#dynamic-programming","text":"Dynamic Programming is an efficient method to find the warping path. In general, dynamic programming evaluate the cumulative distance $$\\gamma(i, j)$$ based on the distance $d(P_s)$ at the current cell and the minimum of the cumulative distances of the adjacent elements. Mathematically, $$ \\gamma(i, j) = d(P_s) + \\min {\\gamma(i-1, j-1), \\gamma(i-1, j), \\gamma(i, j-1)} $$ where $$d(P_s) = d(v_i, v_j)$$ can be calculated by taking the absolute difference between value at $$i$$th point and value at $$j$$point, i.e., $$d(v_i, v_j) = |v_i - v_j|$$","title":"Dynamic Programming"},{"location":"deep_learning/timeseries/dtw/#example","text":"Suppose that we have two time series A and B as follows: $$ A = [ 3, 2, 2, 3, 5, 5, 6 ] $$ $$ B = [ 1, 3, 2, 2, 3, 5 ] $$ First, let's consider point $$P_s = (1,1)$$, i.e., $$i=1$$ and $$j=1$$, the value at $$i=1$$ is $$v(i=1) = 3$$ and the value at $$j=1$$ is $$v(j=1) = 1$$. Hence, the absolute distance at point $$P_s = (1,1)$$ is $$d(P_s) = |3-1| = 2$$. Since the values at the cell above, left and diagonally above $$P_s$$ are all empty, hence, $$\\min {\\gamma(i-1, j-1), \\gamma(i-1, j), \\gamma(i, j-1)} = 0$$. The cumulative distance $$\\gamma(i=1, j=1)$$ will be 2, as shown in Figure below. Let's consider another point $$P_s = (4,4)$$, here we have $$v(i=4) = 3$$ and $$v(j=4) = 2$$. Hence, the absolute distance at point $$P_s = (4,4)$$ is $$d(P_s) = |3-2| = 1$$. The values at the adjacent cells (above, left and diagonally above ) are 3, 2 and 2. By taking the minimum value, we have 2. So, the cumulative distance $$\\gamma(i=4, j=4)$$ will be 3, as shown in Figure below. Figure below shows the final grid (or matrix) with all the value computed. The warping path can be obtained by backtracking from the end point to the beginning point as shown below.","title":"Example"},{"location":"deep_learning/timeseries/dtw/#implementation","text":"Here we will walkthrough a simple implementation of above example in Python. First, define the two time series A and B A = np . array ([ 3 , 2 , 2 , 3 , 5 , 5 , 6 ]) B = np . array ([ 1 , 3 , 2 , 2 , 3 , 5 ]) Initialize a dtw matrix based on the length of A and B, i.e., length of B define the number of rows, and length of A define the number of columns. dtw_mat = np . zeros (( len ( B ), len ( A ))) print ( dtw_mat ) output : [[0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0.]] Now, we need to loop through all element in the dtw matrix, and compute the cumulative distance. # define the absolute distance function d = lambda x , y : np . abs ( x - y ) for i in range ( len ( B )): for j in range ( len ( A )): if i == 0 and j == 0 : dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) else : if i == 0 and j > 0 : choice = dtw_mat [ i , j - 1 ] elif i > 0 and j == 0 : choice = dtw_mat [ i - 1 , j ] else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) + np . min ( choice ) print ( dtw_mat ) output : [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] We can find the warping path by backtracking. path = [[ len ( B ) - 1 , len ( A ) - 1 ]] while ( True ): print ( path ) i , j = path [ - 1 ][ 0 ], path [ - 1 ][ 1 ] if i == 0 and j == 0 : break elif i == 0 and j > 0 : path . append ([ i , j - 1 ]) elif i > 0 and j == 0 : path . append ([ i - 1 , j ]) else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] ind = [[ i - 1 , j ], [ i , j - 1 ], [ i - 1 , j - 1 ]] k = np . argmin ( choice ) path . append ( ind [ k ]) warp = np . zeros (( len ( B ), len ( A ))) for p in path : warp [ p [ 0 ], p [ 1 ]] = 1 print ( warp ) output : [[1. 0. 0. 0. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 0.] [0. 1. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0. 0.] [0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 1. 1. 1.]] Then, we can calculate the normalized distance between time series A and time series B. Assume that all the point shares equal weight, i.e., $$w_s=1$$ for all $$P_s$$, then $$D(A,B)$$ can be computed as follows: $$ D(A,B) = \\frac{1}{k} \\sum_{s = 1}^k d(P_s) $$ D = np . sum ( warp * dtw_mat ) / len ( path ) print ( f 'Normalized Distance: { D : 2f } ' ) output: Normalized Distance: 2.111111","title":"Implementation"},{"location":"deep_learning/timeseries/dtw/#wrap-up-the-implementation-with-function","text":"We can also define a few functions to handle the DTW matrix computation, get the warping path and also compute the normalized distance. def computed_dtwMat ( A , B ): d = lambda x , y : np . abs ( x - y ) for i in range ( len ( B )): for j in range ( len ( A )): if i == 0 and j == 0 : dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) else : if i == 0 and j > 0 : choice = dtw_mat [ i , j - 1 ] elif i > 0 and j == 0 : choice = dtw_mat [ i - 1 , j ] else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] dtw_mat [ i , j ] = d ( B [ i ], A [ j ]) + np . min ( choice ) return dtw_mat We can call the above function by providing time series A and time series B as input arguments, and it will return the dtw_mat . dtw_mat = computed_dtwMat ( A , B ) print ( dtw_mat ) output : [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] We can define a function to get the warping path. def get_warpingPath ( A , B ): dtw_mat = computed_dtwMat ( A , B ) path = [[ len ( B ) - 1 , len ( A ) - 1 ]] while ( True ): i , j = path [ - 1 ][ 0 ], path [ - 1 ][ 1 ] if i == 0 and j == 0 : break elif i == 0 and j > 0 : path . append ([ i , j - 1 ]) elif i > 0 and j == 0 : path . append ([ i - 1 , j ]) else : choice = [ dtw_mat [ i - 1 , j ], dtw_mat [ i , j - 1 ], dtw_mat [ i - 1 , j - 1 ]] ind = [[ i - 1 , j ], [ i , j - 1 ], [ i - 1 , j - 1 ]] k = np . argmin ( choice ) path . append ( ind [ k ]) warp = np . zeros (( len ( B ), len ( A ))) for p in path : warp [ p [ 0 ], p [ 1 ]] = 1 ``` python path , warp , dtw_matrix = get_warpingPath ( A , B ) print ( warp ) print ( dtw_mat ) output : [[1. 0. 0. 0. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 0.] [0. 1. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0. 0.] [0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 1. 1. 1.]] [[ 2. 3. 4. 6. 10. 14. 19.] [ 2. 3. 4. 4. 6. 8. 11.] [ 3. 2. 2. 3. 6. 9. 12.] [ 4. 2. 2. 3. 6. 9. 13.] [ 4. 3. 3. 2. 4. 6. 9.] [ 6. 6. 6. 4. 2. 2. 3.]] Finally, we can have a function to compute the normalized distance. def normalized_dist ( A , B ): path , warp , dtw_matrix = get_warpingPath ( A , B ) D = np . sum ( warp * dtw_mat ) / len ( path ) return D By calling the function normalized_dist , it will return us the normalized distance between time series A and time series B. D = normalized_dist ( A , B ) print ( f 'Normalized Distance: { D : 2f } ' ) output : Normalized Distance: 2.111111","title":"Wrap Up the Implementation with function"},{"location":"deep_learning/timeseries/dtw/#summary","text":"A python script containing all the above functions is provided here You can also refer to the example notebook here on how to apply those functions. There is also a useful dtw-python package provided by Toni dot Giorgino. You can visit his site for more information about dtw-python package. You can also install the package by issuing the following command: pip install dtw-python . DTW is available in Matlab through the Signal Processing Toolbox. For more information about using DTW with Matlab, check out the Matlab documentation about DTW here .","title":"Summary"},{"location":"programming/matlab/","text":"--","title":"Matlab"},{"location":"programming/python/2021-04-18-flattenRavel/","text":"Dealing with multidimensional array with Numpy is quite intuitive. While doing an element-wise multipilication computation with Numpy is basically more easier compared to using a classical programming with a for loop, understanding the internal operation of Numpy is useful to improve the computation efficiency when dealing with arrays consists of millions of elements. In this post, we will look at the differences between flatten and ravel functions. Both functions provide the same one-dimensional output by stacking up a multidimensional inputs. The key difference is how the memory is copied during the process. Let's say we would like to flatten an 1000*1000 dimensional array, using flatten will returns a copy, whereas using ravel will returns a view. The computation time of both functions is shown as follows: import numpy as np # create a 1000*1000 dimensional array arr = np . random . rand ( 1000 , 1000 ) print ( f 'Size of arr: { arr . shape } ' ) Size of arr: (1000, 1000) %% time arr_flatten = arr . flatten () Wall time: 3.95 ms %% time arr_ravel = arr . ravel () Wall time: 0 ns Obviously, ravel is much more faster than flatten . Such a performance speedup can be significant when leading with very large arrays. We can also check that both ravel and flatten functions returns the same output. print ( np . array_equal ( arr_flatten , arr_ravel )) True The difference is that there is not copy operation with ravel . For flatten , the output is a copy of the original array; wheareas for ravel , the output is just a view of original array, in which whatever the changes in the second array will affect the change in the original array. To understand the difference between a copy and a view, consider the memory block of these three arrays. print ( f 'Memory address to store arr: { arr . __array_interface__ [ \"data\" ][ 0 ] } ' ) print ( f 'Memory address to store arr_flatten: { arr_flatten . __array_interface__ [ \"data\" ][ 0 ] } ' ) print ( f 'Memory address to store arr_ravel: { arr_ravel . __array_interface__ [ \"data\" ][ 0 ] } ' ) Memory address to store arr: 2394595090496 Memory address to store arr_flatten: 2394603155520 Memory address to store arr_ravel: 2394595090496 We can see that flatten uses copy the array to a new memory block; whreas ravel simply creates a view to the original array. When array is not in C-order \u2693\ufe0e Note that ravel will also do a copy operation when dealing with array that is not in the C-order. For example, when we consider the array in Fortrain-order, as in a.T , ravel actually returns a flattened version with C-order. %% time arr_ravel2 = arr . ravel () Wall time: 0 ns %% time arr_ravel2T = arr . T . ravel () Wall time: 7.07 ms When dealing with the array in different order, we can specify the order with ravel isntead. %% time arr_ravel3T = arr . ravel ( order = 'F' ) Wall time: 6.03 ms By specifying the order directly within the ravel function, the computation time is slightly faster than doing ravel directly on arr.T .","title":"Flatten vs Ravel functions in Numpy"},{"location":"programming/python/2021-04-18-flattenRavel/#when-array-is-not-in-c-order","text":"Note that ravel will also do a copy operation when dealing with array that is not in the C-order. For example, when we consider the array in Fortrain-order, as in a.T , ravel actually returns a flattened version with C-order. %% time arr_ravel2 = arr . ravel () Wall time: 0 ns %% time arr_ravel2T = arr . T . ravel () Wall time: 7.07 ms When dealing with the array in different order, we can specify the order with ravel isntead. %% time arr_ravel3T = arr . ravel ( order = 'F' ) Wall time: 6.03 ms By specifying the order directly within the ravel function, the computation time is slightly faster than doing ravel directly on arr.T .","title":"When array is not in C-order"},{"location":"programming/python/histogramVis/","text":"Histogram allows us to visualize the frequency distribution of our data. It breaks the data into a few smaller bins according to the value of the data, and then count the number of occurences (i.e., the frequency) in each bin. We can obtain the frequency and bins for a given data using the histogram() function from numpy. Let's consider the following example: import numpy as np # generate 1000 random numbers x = np . random . rand ( 1000 , 1 ) # count the occurences in each bin in x frequency , bins = np . histogram ( x , bins = 10 , range = [ 0 , 1 ]) for b , f in zip ( bins [ 1 :], frequency ): print ( f 'value: { ( round ( b , 1 )) } >> frequency: { f } ' ) Output: value: 0.1 >> frequency: 80 value: 0.2 >> frequency: 80 value: 0.3 >> frequency: 98 value: 0.4 >> frequency: 91 value: 0.5 >> frequency: 123 value: 0.6 >> frequency: 97 value: 0.7 >> frequency: 105 value: 0.8 >> frequency: 102 value: 0.9 >> frequency: 117 value: 1.0 >> frequency: 107 Here, we used numpy.random.rand() function to generate 1000 uniformly distributed values, ranging from 0 to 1. An array x is defined to store the generated values. We would like to know how many data is within 0-0.1, how many occurs at 0.1-0.2, and so on. These can be obtained by calling numpy.histogram() function. Histogram with Matplotlib \u2693\ufe0e Matplotlib allows us to plot the histogram with pyplot.hist() function. Let's continue with the above example, and use the histogram function in Matplotlib to visualize the data distribution. import matplotlib.pyplot as plt plt . hist ( x , bins = 10 ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . show () svg Let's generate another set of random number, but with normal distribution. Instead of numpy.random.rand() , we can use numpy.random.randn() to generate a series of values that follow standard normal distribution with zero mean and standard deviation equals to 1. Notes: if we would like to have a normal distribution with specific mean and standard deviation, we can use the following formula: $$ \\sigma * numpy.random.randn() + \\mu $$ # generate 1000 random numbers x = np . random . randn ( 1000 , 1 ) plt . hist ( x , bins = 10 ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . show () svg Multiple Histograms in a Single Plot \u2693\ufe0e We can plot multiple histograms for easy comparison. Let's create 3 numpy arrays each consists of 1000 normally distributed random numbers based on different mean and standard deviation. x1 = 3 * np . random . randn ( 1000 , 1 ) + 3 x2 = 2 * np . random . randn ( 1000 , 1 ) + 7 x3 = x plt . figure ( figsize = ( 12 , 5 )) plt . hist ( x1 , bins = 10 , alpha = 0.5 , color = 'red' , label = 'x1' ) plt . hist ( x2 , bins = 10 , alpha = 0.5 , color = 'green' , label = 'x2' ) plt . hist ( x3 , bins = 10 , alpha = 0.5 , color = 'blue' , label = 'x3' ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . legend () plt . show () svg Density Distribution \u2693\ufe0e Instead of using the number of occurences as the y-axis, we can normalize the occurences frequency by setting density to True , as shown below: plt . figure () plt . hist ( x , bins = 10 , density = True ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg Style the Histogram \u2693\ufe0e We can create spacing between each bin in the histogram using the set_style() function from seaborn. Note that seaborn is built upon matplotlib, so we can use seaborn and matplotlib together. import seaborn as sns sns . set_style ( \"white\" ) plt . figure () plt . hist ( x , bins = 10 , density = True ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg We can also use the seaborn.histplot() function to visualize the histogram and density curve on the same plot. plt . figure () # sns.histplot(x, bins = 10, hist_kws={'alpha': 0.5}, kde_kws={'linewidth': 2}) sns . histplot ( x , bins = 10 , alpha = 0.5 , stat = \"probability\" , kde = True , legend = False ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg","title":"Visualize Data Distribution with Histogram"},{"location":"programming/python/histogramVis/#histogram-with-matplotlib","text":"Matplotlib allows us to plot the histogram with pyplot.hist() function. Let's continue with the above example, and use the histogram function in Matplotlib to visualize the data distribution. import matplotlib.pyplot as plt plt . hist ( x , bins = 10 ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . show () svg Let's generate another set of random number, but with normal distribution. Instead of numpy.random.rand() , we can use numpy.random.randn() to generate a series of values that follow standard normal distribution with zero mean and standard deviation equals to 1. Notes: if we would like to have a normal distribution with specific mean and standard deviation, we can use the following formula: $$ \\sigma * numpy.random.randn() + \\mu $$ # generate 1000 random numbers x = np . random . randn ( 1000 , 1 ) plt . hist ( x , bins = 10 ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . show () svg","title":"Histogram with Matplotlib"},{"location":"programming/python/histogramVis/#multiple-histograms-in-a-single-plot","text":"We can plot multiple histograms for easy comparison. Let's create 3 numpy arrays each consists of 1000 normally distributed random numbers based on different mean and standard deviation. x1 = 3 * np . random . randn ( 1000 , 1 ) + 3 x2 = 2 * np . random . randn ( 1000 , 1 ) + 7 x3 = x plt . figure ( figsize = ( 12 , 5 )) plt . hist ( x1 , bins = 10 , alpha = 0.5 , color = 'red' , label = 'x1' ) plt . hist ( x2 , bins = 10 , alpha = 0.5 , color = 'green' , label = 'x2' ) plt . hist ( x3 , bins = 10 , alpha = 0.5 , color = 'blue' , label = 'x3' ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Frequency\" ) plt . legend () plt . show () svg","title":"Multiple Histograms in a Single Plot"},{"location":"programming/python/histogramVis/#density-distribution","text":"Instead of using the number of occurences as the y-axis, we can normalize the occurences frequency by setting density to True , as shown below: plt . figure () plt . hist ( x , bins = 10 , density = True ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg","title":"Density Distribution"},{"location":"programming/python/histogramVis/#style-the-histogram","text":"We can create spacing between each bin in the histogram using the set_style() function from seaborn. Note that seaborn is built upon matplotlib, so we can use seaborn and matplotlib together. import seaborn as sns sns . set_style ( \"white\" ) plt . figure () plt . hist ( x , bins = 10 , density = True ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg We can also use the seaborn.histplot() function to visualize the histogram and density curve on the same plot. plt . figure () # sns.histplot(x, bins = 10, hist_kws={'alpha': 0.5}, kde_kws={'linewidth': 2}) sns . histplot ( x , bins = 10 , alpha = 0.5 , stat = \"probability\" , kde = True , legend = False ) plt . title ( \"Data Distribution\" ) plt . xlabel ( \"Value\" ) plt . ylabel ( \"Probability\" ) plt . show () svg","title":"Style the Histogram"},{"location":"tags/","text":"Tags \u2693\ufe0e","title":"Tags"},{"location":"tags/#tags","text":"","title":"Tags"}]}